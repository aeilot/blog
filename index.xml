<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>满五的博客</title>
  
  
  <link href="https://blog.aeilot.top/index.xml" rel="self"/>
  
  <link href="https://blog.aeilot.top/"/>
  <updated>2023-03-30T12:35:42.594Z</updated>
  <id>https://blog.aeilot.top/</id>
  
  <author>
    <name>满五</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅滩</title>
    <link href="https://blog.aeilot.top/2023/03/30/bank-of-sea/"/>
    <id>https://blog.aeilot.top/2023/03/30/bank-of-sea/</id>
    <published>2023-03-30T07:45:09.000Z</published>
    <updated>2023-03-30T12:35:42.594Z</updated>
    
    <content type="html"><![CDATA[<p>秋潮涨落，<br />在那心的桥梁。<br />彼岸还有草露甘香。<br />春泥，<br />是明天的味道。</p><a id="more"></a><p>明天？回答今日的困惑——<br />海的女儿，<br />带来独木扁舟，<br />和那风的号角。</p><p>浅滩上，<br />思绪是雨燕，<br />盘旋徘徊在碧海青天。<br />飞去！远行！<br />散不去的是层雾迷蒙。</p><p>潮起，潮落，<br />潮水在我脑海的浅滩起落。<br />潮水啊，何时平息在大海的尽头？<br />——大海一刻不停，在欢唱：<br />“生生不息……“</p><p>秋潮带走了我，<br />浅滩上，<br />我还是我的我，<br />我的生命将是大海。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;秋潮涨落，&lt;br /&gt;
在那心的桥梁。&lt;br /&gt;
彼岸还有草露甘香。&lt;br /&gt;
春泥，&lt;br /&gt;
是明天的味道。&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="诗歌" scheme="https://blog.aeilot.top/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>蝉 · 夏</title>
    <link href="https://blog.aeilot.top/2023/03/25/summer/"/>
    <id>https://blog.aeilot.top/2023/03/25/summer/</id>
    <published>2023-03-25T15:45:09.000Z</published>
    <updated>2023-03-26T06:46:15.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a class="markdownIt-Anchor" href="#一"></a> 一</h2><p>六月的鸣蝉嘒嘒，微弱却唱响夜空。</p><a id="more"></a><p>路旁的小楼上，沐心倚着阳台的栏杆，远眺万里澄澈的夜空。偌大的城市。车水马龙，光线在飞驰而过的喧闹声中划过眼前的夜。她又在极目远眺。但早就没有什么人让她这样等待了，她也不再是当年的孩童了。<br />沐心家在郊区，上海的郊区。远方的铁道线路，路旁树丛中窸窸窣窣的夏夜之歌，沐心心里却是另一番景象。此时她正看着稀少的来往车辆，发着呆。她喜欢这样，在夜晚思考。但她的确没有思考什么。<br />“那些……所以……” 她似在嘀咕着。这心中涌动的问与答不小心说了出口。<br />脸庞淡红，她忽地四下望，慌乱中险些将手中的笔丢到轻盈的夏季的空气中，坠落。好在四周没有人。毕竟那很是尴尬呢。<br />绿化带上，花丛中飘来淡淡清香。<br />回到起居室内，墙壁上贴着几面镜子。夏季新雨过后，燥热却仍带湿润的空气早已给镜面蒙了一层纱。不知是深夜的恍惚，还是水雾幻境，亦或者是幻觉，沐心在镜中看见了自己的倩影，似在清澈的梦境中漂浮。奇怪，明明是夏季，南方夏日，心里实在是一丝寒冷，太凉了。镜中，她看见了眼角带着一些满溢的温热的湿润。或许是水汽，或许……她莞尔一笑，或是笑情绪真是捉摸不透。<br />但刚才面对广袤深空，感受大地和城市脉搏，她确是有些言语未说出口。蝉鸣替她讲完了口边的千言万语。<br />横道线，柏油路，黑白漆。入夜，染上了淡蓝，仿佛被水蒙盖一般奇妙。<br />交通信号灯还在闪烁。</p><h2 id="二"><a class="markdownIt-Anchor" href="#二"></a> 二</h2><p>泪眼迷蒙中，她又开始远望。她看见的不是山，不是海，不是坠入大地的夕阳。她看见了虚空，夜晚。星稀疏，一颗、两颗——那是飞机。<br />高处风疾。她扣上毛线衫的扣子，双手在胸前轻抚。很是清凉。触摸耳旁，发丝不经意间滑过那手。碧发微寒。<br />蝉鸣还未歇。<br />夜晚带她去往十多年之前。<br />那时，在公路道口，夹竹桃盛开的地方，外婆带着她等待晚归的父母。<br />那时，经济发展迅速，这样的千年古国展露出蓬勃生机。这座国际大都市，上海，自然吸引了许多投机者，创立企业。她的父母便是这样的人，不过，他们算是后来者。不知有没有赶上末班车了。沐心只在政治课上偶然了解了这些，那些政治课也不知她是如何度过时光的。<br />不过她记得，每个这样的黄昏，她都和外婆在这里等待。那时她五岁。<br />闷热的天气，潮湿的衬衫，实在是让人喘不过气来。夕阳把碧空染成火的颜色，高速路边绿树成荫。道口有一个公交车站，却少有行人。这是终点站。<br />她不在乎来往的车辆，不在乎来往的行人。她极目远眺，希望见到一个骑摩托车的身影。那是父亲。<br />她若有所思，发呆的习惯或许是从这一刻开始的。<br />蝉鸣窸窸窣窣，知了知了……<br />外婆通常不会说话，这是她的性格。沐心很少了解到外婆的故事，却只是知道外婆是母亲从远在山区的老家叫来照看她的。不过那时外婆也还年轻。<br />“妈妈她们快回来了，很快的。”<br />“嗯……“<br />等待中，夕阳已从树梢落入地平线，斗转星移，繁星点点。她看着来往车辆，鸣笛声也像水流般从她耳侧淌过。天空中还是有飞机，但她没有兴趣。她看向昏暗的树林，似乎感觉有什么可怕的东西要冲出来。那或许是外婆口中传说的野兽，吓唬小孩子的什么东西。她或许从没有信以为真。但那些恐惧是有名字的，就是她心中的不安。<br />阳光沉入大地，她心里却只是想，他们怎么还不回来，他们什么时候回来。从小一个人成长，也不懂得与人们交流。她很是不安。<br />蝉鸣越来越急了，她心烦意乱。<br />这时微风拂面，她的发丝飘摇。游丝一般的闷热依然萦绕，担忧阴魂不散。<br />但远处骑着黑色摩托的熟悉身影到来，她心中的石头沉下来了。蝉鸣声不息，窸窸窣窣。她的眼泪都快落下来了。<br />后面的事，她的记忆便不太清晰了。但那种缺乏安全感的混乱，却被她带走了，直到今天。</p><h2 id="三"><a class="markdownIt-Anchor" href="#三"></a> 三</h2><p>她往往是沉默的，她看似少年老成，内心活动却异常丰富。她不善与人相处，却又渴求一种她自己也说明不清的东西。她曾在回忆中搜寻，在散步时追问。没有答案。所以她在痛苦什么？所以她在追寻什么？<br />铁道线上，地铁飞驰而过打断了她的思绪。<br />地铁？初中时期，沐心就每天乘地铁上学。地铁飞驰而过，空气的清澈声响，让她倍感亲切。<br />曾经有一阵子，沐心确实以为自己得到了自己想要的东西。<br />一头乌黑秀发的少年，成绩也是不错呢。性格活泼，又有一些调皮。他那时在班上也很受欢迎吧。少年名叫晨星，是沐心的同班同学，性格却完全相反。但不知什么机缘巧合，两个人相识了，相处还算是愉快。不过如今沐心也记不得什么了，断绝往来，只能叹息人性虚伪咯。<br />不过，他们曾经每周的书店之旅，却实在是难忘。<br />学校门口，桂花盛开。学校在上海的老城区，学校是一所老学校。放学时间，同学都围在门口小卖店，谈论最新的电影、小说，嬉戏打闹。马路上车流不断，天空是浅粉色。<br />放学之后，他们会去快餐店买那几元钱的小吃，也会去书店闲逛。书店边是一所大学，学校里树林茂盛，那时也快到了樱花盛开的季节。<br />那时，沐心的整个世界崩塌了。她只记得自己病了，心病了。冰冷的世界，冷漠的人潮，她只觉得人性冷淡，觉得世界陌生，觉得处处敌对。暗淡无光的眸子中，泪光常挂。但连泪光也是无力的。只有那叹息声中还能听得出一些希望。<br />书店之行就是她生活中的光。<br />“我喜欢川端康成，我要做那样的小说家。”<br />“嗯，他的书确实不错。我也喜欢。”<br />晨星介绍自己热爱的数目，沐心便看到了少年朝气，有的时候还为这种感觉感动呢。<br />那段时间，沐心差点自杀了。那段时间，她确实死了，但她重生了。<br />还记得她“回来”之后，面对十一月冰冷的夜空，在南京路上轻盈的步伐，和朋友逛街探店，脸上的欢笑。<br />夕阳斜照，步行街上，她感觉在微风中，她要飞起来了。<br />草木微动，澄空微寒。</p><h2 id="四"><a class="markdownIt-Anchor" href="#四"></a> 四</h2><p>蝉鸣声不歇的夏季，沐心这次有些迷茫。<br />她经历了太多，比眼前马路上来往的车辆数多多了。无数次的等待，无数次陪伴和冷落。她还在追寻什么，她向往的生活是什么？<br />她自己也不知道。<br />独立？自由？爱？<br />她缺少家庭的温暖，缺少真实的交流。对，确实是这样。<br />但她又确实不缺少什么。<br />蝉鸣声窸窸窣窣。她的思忖永无休止。<br />她仇恨吗？有一点。<br />但她早已知道，过去的世界已经在幻梦中走向消亡。<br />门铃声响。父亲夜晚回家。<br />她好像幻听。“抱歉，久等了。“<br />没有声音。<br />”回来了。“<br />无数次的等待，无数次的不安。<br />幼时曾担心而哭泣。长大后，这一切都有了新的含义。<br />未来想来会不会觉得幼稚？<br />但在这些经历中，她变了。<br />……<br />蝉鸣声不息，空气闷热。窗口亮起昏暗的灯火。那是远方的村庄。她睡去了，泪光比夜空澄澈。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一&quot;&gt;&lt;/a&gt; 一&lt;/h2&gt;
&lt;p&gt;六月的鸣蝉嘒嘒，微弱却唱响夜空。&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="小说" scheme="https://blog.aeilot.top/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>微风</title>
    <link href="https://blog.aeilot.top/2023/03/12/breeze/"/>
    <id>https://blog.aeilot.top/2023/03/12/breeze/</id>
    <published>2023-03-12T15:45:09.000Z</published>
    <updated>2023-03-26T06:46:06.759Z</updated>
    
    <content type="html"><![CDATA[<p>少年的长发，飘扬在微风明朗的五月。</p><a id="more"></a><p>气息中还带有一丝土壤的味道，絮飞扬，花洒地。昨夜的雨是否浸湿了娇嫩的绿叶，沉睡的草木醒来，便是疯狂滋长。入夏，蝉鸣。<br />斗转星移的深邃海洋，飞鸟划过夜空。空中若隐若现的涟漪，像那些出海的日子，海鸥溅起片片水花，如同敲击冰面的冰花。<br />少年就这样望。在窗边望，在小院思。院门外鸡狗声未歇，在看不到的角落，或许行人惊醒了沉睡的生机。但哪有什么行人？半夜三更。……<br />少年要去赴那六月的邀约，回到想象中水墨山水的西湖。湖上的蓬舟，水上的浮木，船夫用船桨在水中留下的草书笔画，是否如兰亭的碑文。未有形先有情。浊酒一杯，彻夜不眠。湖上附着的水汽的薄膜，如莅仙界。少年想起了少女的素娟，柔转、飞舞，牵动的情思。然而透过西湖的雾色面纱，黑暗难以辨识的远山上还有昏黄的灯火。山外是否有人家？山中行，耕作、饮酒、作诗，砍柴喂马。天下遨游，睥睨万物。<br />可惜少年在那个五月出发去了远方。那是一种生命中或许只能有一次的奇妙旅行。穿过意识深处的山野，在荒郊城外的林间小路行走，踏上天空。天空或许有局限。囚禁在这里，在树林、在空间穿梭，在时间。少年困在现在，现在摆脱不了少年的束缚。莫名的苦痛，眼角的泪花。变幻莫测的时空，这个世界上必然有能容少年之地？沉入深海。<br />湖光山色，天快亮了。船上是少女的笑颜。粉色的天空，浅蓝的湖水，纯洁的白雾。碧竹编成的蓬舟，如今历经沧桑，泛黄。忽然飘起了雪花，一片一片，粉白的澄空中，一片一片。<br />少女起身，船头眺望。一望无际的湖山。少年是否长存天地之间？逍遥自在，山间村居。少女不知道，但或许少年在她中存在，谁知道呢。一段未有人诉说的故事，或许来年春天向我们讲述？<br />少女的长发，飘扬在微风明朗的十二月。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;少年的长发，飘扬在微风明朗的五月。&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="杂文" scheme="https://blog.aeilot.top/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>观星</title>
    <link href="https://blog.aeilot.top/2023/02/01/stargazing/"/>
    <id>https://blog.aeilot.top/2023/02/01/stargazing/</id>
    <published>2023-02-01T15:45:09.000Z</published>
    <updated>2023-02-02T12:53:55.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>二月快乐！</p></blockquote><a id="more"></a><p>今夜的我<br />没有篝火 山歌和露水<br />立在窗前好似身处一片虚无<br />触不可及的，是<br />那飘渺的月的诗行<br />和缠绵悱恻的繁星的歌谣，<br />都随我进入那清风入夜而归。</p><p>何归也？<br />窗前的虚无，<br />天真的人们把他称作“星空”。<br />那是人类的终极宿命，<br />从参宿四出发，<br />半人马座、小熊座、双鱼座。<br />总有一个地方，<br />觅遍那枯肠，<br />也要寻得恰如其分的比喻，<br />倾诉跨越光年的思忖。</p><p>光年之外，<br />琴声来自光年之外，<br />那一刻我变成了光，<br />光变成了宇宙。<br />那是 137 亿年前的消息，<br />今夜向我诉说，<br />或许如《百年孤独》一般，<br />命中注定和羊皮卷，<br />正等待我破译。</p><p>地球上，<br />诗人写下诗行，<br />被天地之间的人们传唱；<br />宇宙间，<br />银河里盛满了今夜我心中的泪，<br />而我的空虚也有宇宙广大。<br />今夜，<br />我当织女，<br />而那逝去的过往便是我的牛郎，<br />只恨过往再难相遇。</p><p>世事繁杂，<br />车水马龙，<br />搅乱我<br />绵延至数个天文单位外的<br />联结，<br />是同那宇宙，<br />和那过往的云霭。<br />在世界寻不得自己的位置，<br />我愿远去，<br />去那星云之间，<br />做一颗即将诞生的恒星，<br />光热，照亮世间的层雾。</p><p>今夜的你<br />没有篝火 山歌和露水，<br />两手空空来敲我的家门，<br />何妨？<br />好在还有封存的记忆。<br />远行，<br />去脱离着轮回，<br />挣脱指数级的孤独的束缚。</p><p>远行，<br />不知东方既白。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;二月快乐！&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="诗歌" scheme="https://blog.aeilot.top/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>浮尘</title>
    <link href="https://blog.aeilot.top/2023/01/27/dust/"/>
    <id>https://blog.aeilot.top/2023/01/27/dust/</id>
    <published>2023-01-27T02:45:09.000Z</published>
    <updated>2023-01-27T07:12:07.981Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试随便乱写点诗歌。</p><a id="more"></a><p>微尘，<br />浮沉，<br />孤身行大漠的旅人。<br />跨越了半个世纪的风雪，<br />休憩在我的窗前。</p><p>行大漠，<br />越风雪，<br />如今在太阳的怒吼下，<br />飞舞，<br />浮沉，<br />像个不懂事的孩子。</p><p>微尘<br />浮沉，<br />微不足道的力量，<br />却敢向那太阳挑衅，<br />从不笃信是那太阳给了他生命和舞蹈。</p><p>跨越了半个世纪的风雪<br />休憩在我的窗前，<br />又用那剩下的半个世纪，<br />完成未竟的事业，<br />挑战太阳，<br />飞舞，<br />浮沉。</p><p>东方的太阳，<br />强壮的战士，<br />沉没在西方的深海。<br />火种熄灭。<br />熄灭，<br />浮尘，<br />黑暗中舞蹈。</p><p>黑暗中孕育着新的太阳。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近尝试随便乱写点诗歌。&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="诗歌" scheme="https://blog.aeilot.top/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>复活</title>
    <link href="https://blog.aeilot.top/2023/01/11/revival/"/>
    <id>https://blog.aeilot.top/2023/01/11/revival/</id>
    <published>2023-01-11T11:45:09.000Z</published>
    <updated>2023-01-11T13:35:06.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>岁月如梭；来日方长。<br />幻想自己的模样，并被如今吓一跳。是时候启航了，这一次去更远的地方，用更好的航海术。</p></blockquote><a id="more"></a><p>光，是流水划过我的眼眸。睁开双眼，柔焦，模糊的光影。眼角之间，好像有什么粘稠作一团的东西，阻碍着光线的生长。眼角还有泪痕，仿佛昨夜一场梦境初醒，却信以为真，身临其境，不能自拔，深陷其中而感受到的虚弱。是的，我无法抬起我的双臂，使出全身力气，不能控制我的双腿。我的身体脱离了束缚，或者说，我的灵魂脱离了束缚。肉体存在于很远的地方，要等待醒来的召唤，解除夜的梦的封锁。在梦境里，无法做出选择，对着变化的世界，旋转，眩晕。光丝在眼中生长扩散，舒展开的肌肉，双眉。醒来之后又有一个梦，梦里还有梦，环环相扣，人生只不过是众多梦境中的一个，何必分清虚实。</p><p>起身，又是一个清晨，叹息已经注定了一天的重复的单调。穿衣，刷牙，洗脸，整理，打扮，重复的早餐，三明治配牛奶。仍有气无力打开电脑，Telegram、微信、Visual Studio Code。很好，不出所料的没有新信息。手机上，微信群里的声音却已经让人厌倦，甚至让人想要卸载微信，清空所有联系。不过是一些交流群、同学群，却没有勇气，或者说没有兴趣点开那空白的输入框。就像新建文件却不知道填写什么标题，删除，再新建，永无休止才发现一个上午的时间早已流失；就像站立的荒芜的水泥地上，而这水泥地正在你的脚下崩裂，坠入黑暗的深渊，在边境之地徘徊，悬浮，却没有勇气向下一看惊喜地发现离地半米，有惊无险。人或许是危险的，就像孤身一人行走在原始森林，对周围的风吹草动担惊受怕，哪怕只是一只弱小的蚂蚁。毕竟是一个人。过去，行走在人潮涌动的商业区，南京东路，看着来往的人流，交通警察维持秩序，店员售卖琳琅满目的商品。灯火通明，夜空被霓虹招牌点亮，灯下袅袅的烟霭，路边摊的烧烤，远处的香味。那一个晚上或许只是一场梦。接近人潮，不安，抗拒，这样的喧闹只让人心神不宁，甚至不愿与那店员交易换取心仪的纪念商品。这种萦绕的思忖，反复涌动如同这来往的不断地人潮，脑海中，一个开启就无法关闭的收音机，播放我听不懂的语言，蜂鸣。紧接着是静穆，远处来往的地铁。溺亡，在自己创造的声音的海洋中。但今天，我祈祷免受折磨，免于崩溃。</p><p>正午，日光击在窗前，我心中一颤，好像听到了太阳的搏击。地面是纸屑，却像五月的碎玻璃。但那或许只是我的谎言。那天玻璃杯无故坠地破碎。那天重拾起封印的记忆。想起以前，能有一个在自己控制之内的圈子，便就能满足，便把自己锁起来，独享安宁。想到往昔的隐者，自耕自食。回不去又何必在谈起。于是写下，逃离舒适圈，说起，自己不再能满足的丑话。谁知是如今的窘迫。幸于能收获一线庇护，一丝未来的希冀吧。由是感激。虽然有时甚至觉得上天不公，背叛了我，私自选择了我的诞生，选择了我的社会身份，选择了一切，但来了总不能留下遗憾。是吗？</p><p>手机上有了新通知？起身，弹出座位，一把抓住手机，扯下充电线，按开屏幕，划出通知栏，却发现是垃圾邮件。不知道在期待什么啊！微信上，重复发出的表情，解释说自己变了，辩解说自己开心。狡辩。也罢，往事如烟。长期行走在痛苦的边缘，过去是否真正互相理解？不过站在当今看过去，就连最悲惨的都被珍惜。也是可笑，人类如何能做到有这么多情感，我又如何能做到如此在意？我不在意，我要逃离那个地方，逃离这个纷繁的世界。我要回到我的世界。</p><p>冰雪融化，却是在午后。太阳似乎要吞噬这座内心的冰城，而水流也已近干涸。破开生活的茧，破开自己已知的世界，走向未知。此刻我是那个好奇的初生的生命，探索从未涉足的领域，社会的领域。打开围栏，打开窗户，像鸟飞向远方。重生，或许是复活。但是生与死没有界限，生即是死，死即是生。如此说，这是我的第5783次。手起刀落，斩断流动的人潮，斩断隔膜，铲除混响的收音机。我疯了，但我没疯。这个世界上有太多的人，他们疯了？当世界上所有人都不能理解我的内心，他们疯了还是我疯了？他们不正常还是我不正常？没有人是对的，没有人是错的。切断这个梦的天际，让我重新控制我的身体。太久的沉寂，我需要醒来。向外界迈出新的一步，这一次步态坚定。试图融入，试图改变，试图接受。永恒的不是闭塞，而是万象更新的生气。并庆祝我此刻的存在。是的，谢天谢地我活下来了。不说改变世界的空话，先提升自己。</p><p>还是想起某一个午后，约定去书店。那时候的内心世界阴沉，你是一束光照进了我，穿透了我，我醒了，我悟了。翻动书本，立志一起追逐天边的太阳；在夜晚也会歌唱，围炉夜话，谈论琐碎的小事。买一瓶奶茶，把它弄洒，还有河流上的风。五彩斑斓的世界，从痛苦的记忆中走出，感受到生活的真实。我真实存在着。你不懂，我以为你懂了。这是无意之举。或许又有一天，午后，却因为一点点小分歧，餐盘打翻在空中，我的悔恨从此不再离开。但那不是你，但那是我未能送上的歉意，是我欠下的一笔债，无处去还。默默祈祷自己的转变。不在意，不评论。只谈论自己，太久不奋力拼搏，如今的我要为生存，为生活反抗，反抗世界，反抗天地。并且但愿我不是孤身一人。</p><p>身体中充满力量，前进的动力，那些过去或许一起说过的话。没有道路就创造道路，没有条件就创造条件，没有方法就创造方法。“骗谁呢。”但如今的确可以再拿出来，想着许诺的未来迈进了，但是想到少了点什么。</p><p>复活？你说只是来到了下一层炼狱。</p><p>炼狱就炼狱。我喜欢这里，因为不经受考验，就不再会有成长。我感恩痛苦，感恩打击；我祈祷痛苦，祈祷夜幕降临，纵使繁星点点无法入眠，脑海中思绪不受控制，不受限制。</p><p>夜幕真的降临了。Wish you were here. 但 You are always here 不是吗。可能吧。但我要远航了，去那遥远的地方。带上希望。复活。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;岁月如梭；来日方长。&lt;br /&gt;
幻想自己的模样，并被如今吓一跳。是时候启航了，这一次去更远的地方，用更好的航海术。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="杂文" scheme="https://blog.aeilot.top/tags/%E6%9D%82%E6%96%87/"/>
    
    <category term="情感" scheme="https://blog.aeilot.top/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>【摘录 | 转载】普鲁斯特 《追忆似水年华》第一卷 《在斯万家那边》（一）</title>
    <link href="https://blog.aeilot.top/2023/01/04/in-search-of-lost-time-excerpt-1/"/>
    <id>https://blog.aeilot.top/2023/01/04/in-search-of-lost-time-excerpt-1/</id>
    <published>2023-01-04T00:45:09.000Z</published>
    <updated>2023-01-04T01:55:23.677Z</updated>
    
    <content type="html"><![CDATA[<p>摘录一些最近正在拜读的作品。</p><a id="more"></a><h2 id="p46~50"><a class="markdownIt-Anchor" href="#p46~50"></a> P46~50</h2><p>就这样，在很长一段时期内，每当我半夜梦中回忆及贡布雷的时候，就只看到这么一块光明，孤零零地显现在茫茫黑暗之中，象腾空而起的焰火，象照亮建筑物一角的电光，其余部分都沉没在黑夜里。这块光明上尖下宽：下面是小客厅、餐厅、花园中幽暗小径的开头一截（无意中造成我哀愁的祸首斯万先生要从那面走来）和门厅（我要由此而踏上楼梯的第一级），而攀登起来令我心碎的楼梯则构成这个不规则棱锥体的非常狭窄的锥干；顶部是我的卧室、卧室外的过道、过道口的玻璃门，我的母亲就是从那里进来的。总之，老在晚上那个钟点见到、同周围事物完全隔绝、在黑暗中孤零零地显现的，就是这么一幕简而又简的布景（等于一般老式剧本的开头为供外省演出参考而作的布景提示），为了重演我更衣上床的那出戏，这些道具是少得不能再少了；似乎贡布雷只有楼上楼下，由一部小小的楼梯连接上下，似乎只有晚上七点钟这一个时辰。说实话，倘若有人盘问我，我或许会说贡布雷还 有别的东西，别的时辰。但，那将是我有意追忆，动脑筋才想到的一鳞半爪；而有意追忆所得到的印象并不能保存历历在目的往事，反正我决不会自愿地去回想贡布雷的其他往事。它们在我的心目中其实早已死了。</p><p>永远消亡了？可能吧。</p><p>这方面偶然的因素很多，而次要的偶然，例如我们偶然死去，往往不允许我们久久期待首要的偶然带来的好处。</p><p>我觉得凯尔特人的信仰很合情理。他们相信，我们的亲人死去之后，灵魂会被拘禁在一些下等物种的躯壳内；例如一头野兽，一株草木，或者一件无生物，将成为他们灵魂的归宿，我们确实以为他们已死，直到有一天——不少人碰不到这一天——我们赶巧经过某一棵树，而树里偏偏拘禁着他们的灵魂。于是灵魂颤动起来，呼唤我们，我们倘若听出他们的叫唤，禁术也就随之破解。他们的灵魂得以解脱，他们战胜了死亡，又回来同我们一起生活。</p><p>往事也一样。我们想方设法追忆，总是枉费心机，绞尽脑汁都无济于事。它藏在脑海之外，非智力所能及；它隐蔽在某件我们意想不到的物体之中（藏匿在那件物体所给予我们的感觉之中），而那件东西我们在死亡之前能否遇到，则全凭偶然，说不定我们到死都碰不到。</p><p>这已经是很多很多年前的事了，除了同我上床睡觉有关的一些情节和环境外，贡布雷的其他往事对我来说早已化为乌有。可是有一年冬天，我回到家里，母亲见我冷成那样，便劝我喝点茶暖暖身子。而我平时是不喝茶的，所以我先说不喝，后来不知怎么又改变了主意。母亲着人拿来一块点心，是那种又矮又胖名叫“小玛德莱娜”的点心，看来象是用扇贝壳那样的点心模子做的。那天天色陰沉，而且第二天也不见得会晴朗，我的心情很压抑，无意中舀了一勺茶送到嘴边。起先我已掰了一块“小玛德莱娜”放进茶水准备泡软后食用。带着点心渣的那一勺茶碰到我的上腭，顿时使我混身一震，我注意到我身上发生了非同小可的变化。一种舒坦的快感传遍全身，我感到超尘脱俗，却不知出自何因。我只觉得人生一世，荣辱得失都清淡如水，背时遭劫亦无甚大碍，所谓人生短促，不过是一时幻觉；那情形好比恋爱发生的作用，它以一种可贵的精神充实了我。也许，这感觉并非来自外界，它本来就是我自己。我不再感到平庸、猥琐、凡俗。这股强烈的快感是从哪里涌出来的？我感到它同茶水和点心的滋味有关，但它又远远超出滋味，肯定同味觉的性质不一样。那么，它从何而来？又意味着什么？哪里才能领受到它？我喝第二口时感觉比第一口要淡薄，第三口比第二口更微乎其微。该到此为止了，饮茶的功效看来每况愈下。显然我所追求的真实并不在于茶水之中，而在于我的内心。茶味唤醒了我心中的真实，但并不认识它，所以只能泛泛地重复几次，而且其力道一次比一次减弱。我无法说清这种感觉究竟证明什么，但是我只求能够让它再次出现，原封不动地供我受用，使我最终彻悟。我放下茶杯，转向我的内心。只有我的心才能发现事实真相。可是如何寻找？我毫无把握，总觉得心力不逮；这颗心既是探索者，又是它应该探索的场地，而它使尽全身解数都将无济于事。探索吗？又不仅仅是探索：还 得创造。这颗心灵面临着某些还 不存在的东西，只有它才能使这些东西成为现实，并把它们引进光明中来。</p><p>我又回过头来苦思冥想：那种陌生的情境究竟是什么？它那样令人心醉，又那样实实在在，然而却没有任何合乎逻辑的证据，只有明白无误的感受，其它感受同它相比都失去了明显的迹象。我要设法让它再现风姿，我通过思索又追忆喝第一口茶时的感觉。我又体会到同样的感觉，但没有进一步领悟它的真相。我要思想再作努力，召回逝去的感受。为了不让要捕捉的感受在折返时受到破坏，我排除了一切障碍，一切与此无关的杂念。我闭目塞听，不让自己的感官受附近声音的影响而分散注意。可是我的思想却枉费力气，毫无收获。我于是强迫它暂作我本来不许它作的松弛，逼它想点别的事情，让它在作最后一次拚搏前休养生息。尔后，我先给它腾出场地，再把第一口茶的滋味送到它的跟前。这时我感到内心深处有什么东西在颤抖，而且有所活动，象是要浮上来，好似有人从深深的海底打捞起什么东西，我不知道那是什么，只觉得它在慢慢升起；我感到它遇到阻力，我听到它浮升时一路发出汩汩的声响。</p><p>不用说，在我的内心深处搏动着的，一定是形象，一定是视觉的回忆，它同味觉联系在一起，试图随味觉而来到我的面前。只是它太遥远、太模糊，我勉强才看到一点不陰不陽的反光，其中混杂着一股杂色斑驳、捉摸不定的漩涡；但是我无法分辨它的形状，我无法象询问唯一能作出解释的知情人那样，求它阐明它的同龄伙伴、亲密朋友——味觉——所表示的含义，我无法请它告诉我这一感觉同哪种特殊场合有关，与从前的哪一个时期相连。</p><p>这渺茫的回忆，这由同样的瞬间的吸引力从遥遥远方来到我的内心深处，触动、震撼和撩拨起来的往昔的瞬间，最终能不能浮升到我清醒的意识的表面？我不知道。现在我什么感觉都没有了，它不再往上升，也许又沉下去了；谁知道它还 会不会再从混沌的黑暗中飘浮起来？我得十次、八次地再作努力，我得俯身寻问。懦怯总是让我们知难而退，避开丰功伟业的建树，如今它又劝我半途而废，劝我喝茶时干脆只想想今天的烦恼，只想想不难消受的明天的期望。</p><p>然而，回忆却突然出现了：那点心的滋味就是我在贡布雷时某一个星期天早晨吃到过的“小玛德莱娜”的滋味（因为那天我在做弥撒前没有出门），我到莱奥妮姨妈的房内去请安，她把一块“小玛德莱娜”放到不知是茶叶泡的还 是椴花泡的茶水中去浸过之后送给我吃。见到那种点心，我还 想不起这件往事，等我尝到味道，往事才浮上心头；也许因为那种点心我常在点心盘中见过，并没有拿来尝尝，它们的形象早已与贡布雷的日日夜夜脱离，倒是与眼下的日子更关系密切；也许因为贡布雷的往事被抛却在记忆之外太久，已经陈迹依稀，影消形散；凡形状，一旦消褪或者一旦黯然，便失去足以与意识会合的扩张能力，连扇贝形的小点心也不例外，虽然它的模样丰满肥腴、令人垂涎，虽然点心的四周还 有那么规整、那么一丝不苟的绉褶。但是气味和滋味却会在形销之后长期存在，即使人亡物毁，久远的往事了无陈迹，唯独气味和滋味虽说更脆弱却更有生命力；虽说更虚幻却更经久不散，更忠贞不矢，它们仍然对依稀往事寄托着回忆、期待和希望，它们以几乎无从辨认的蛛丝马迹，坚强不屈地支撑起整座回忆的巨厦。</p><p>虽然我当时并不知道——得等到以后才发现——为什么那件往事竟使我那么高兴，但是我一旦品出那点心的滋味同我的姨妈给我吃过的点心的滋味一样，她住过的那幢面临大街的灰楼便象舞台布景一样呈现在我的眼前，而且同另一幢面对花园的小楼贴在一起，那小楼是专为我的父母盖的，位于灰楼的后面（在这以前，我历历在目的只有父母的小楼）；随着灰楼而来的是城里的景象，从早到晚每时每刻的情状，午饭前他们让我去玩的那个广场，我奔走过的街巷以及晴天我们散步经过的地方。就象日本人爱玩的那种游戏一样：他们抓一把起先没有明显区别的碎纸片，扔进一只盛满清水的大碗里，碎纸片着水之后便伸展开来，出现不同的轮廓，泛起不同的颜色，千姿百态，变成花，变成楼阁，变成人物，而且人物都五官可辨，须眉毕现；同样，那时我们家花园里的各色鲜花，还 有斯万先生家花园里的姹紫嫣红，还 有维福纳河塘里飘浮的睡莲，还 有善良的村民和他们的小屋，还 有教堂，还 有贡布雷的一切和市镇周围的景物，全都显出形迹，并且逼真而实在，大街小巷和花园都从我的茶杯中脱颖而出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘录一些最近正在拜读的作品。&lt;/p&gt;</summary>
    
    
    
    <category term="摘录" scheme="https://blog.aeilot.top/categories/%E6%91%98%E5%BD%95/"/>
    
    
    <category term="转载" scheme="https://blog.aeilot.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="小说" scheme="https://blog.aeilot.top/tags/%E5%B0%8F%E8%AF%B4/"/>
    
    <category term="意识流" scheme="https://blog.aeilot.top/tags/%E6%84%8F%E8%AF%86%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Time - Pink Floyd - The Dark Side of the Moon</title>
    <link href="https://blog.aeilot.top/2022/12/29/time-lyric/"/>
    <id>https://blog.aeilot.top/2022/12/29/time-lyric/</id>
    <published>2022-12-29T12:45:09.000Z</published>
    <updated>2022-12-30T01:26:39.589Z</updated>
    
    <content type="html"><![CDATA[<p>Having pored over the lyrics, I have these comments:</p><p>Nobody to show us the way, nobody to tell you when to run, no chance to catch up with the sun. It’s late and you’ve been getting closer to death.</p><p>So get home and see the rain. Paralyzed, missed out on the sunshine and at last forever wandering.</p><h2 id="links"><a class="markdownIt-Anchor" href="#links"></a> Links</h2><p><a href="https://www.youtube.com/watch?v=Qr0-7Ds79zo">YouTube</a> | <a href="https://en.wikipedia.org/wiki/Time_(Pink_Floyd_song)">Wikipedia</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Having pored over the lyrics, I have these comments:&lt;/p&gt;
&lt;p&gt;Nobody to show us the way, nobody to tell you when to run, no chance to catch</summary>
      
    
    
    
    <category term="音乐" scheme="https://blog.aeilot.top/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
    <category term="歌词" scheme="https://blog.aeilot.top/tags/%E6%AD%8C%E8%AF%8D/"/>
    
    <category term="EN" scheme="https://blog.aeilot.top/tags/EN/"/>
    
    <category term="摇滚" scheme="https://blog.aeilot.top/tags/%E6%91%87%E6%BB%9A/"/>
    
  </entry>
  
  <entry>
    <title>【转载】静夜思变调</title>
    <link href="https://blog.aeilot.top/2022/12/23/jingyesibiandiao/"/>
    <id>https://blog.aeilot.top/2022/12/23/jingyesibiandiao/</id>
    <published>2022-12-23T02:45:09.000Z</published>
    <updated>2022-12-23T03:35:37.061Z</updated>
    
    <content type="html"><![CDATA[<p>转载一首好诗。</p><a id="more"></a><blockquote><p>故乡，留下一段回忆，过去的我在现在的我在未来的我，萦绕，怀念。可惜故乡，可恨昨天只隔数小时，却比月还遥远。</p><p>毕竟，一秒钟的距离便是到宇宙毁灭的距离了。</p><p>生命是瞬间。</p></blockquote><h2 id="原文熊秉明-静夜思变调"><a class="markdownIt-Anchor" href="#原文熊秉明-静夜思变调"></a> 原文：熊秉明 ·《静夜思变调》</h2><h3 id="一-序"><a class="markdownIt-Anchor" href="#一-序"></a> 一 序</h3><p>大诗人的小诗<br />从椽笔的毫端落出来<br />像一滴偶然<br />不能再小的小诗<br />而它已岸然存在<br />它已是我们少不了的<br />它在我们学母语的开始<br />在我们学步走向世界的开始<br />在所有的诗的开始<br />在童年预言未来成年的远行<br />在故乡预言未来远行人的归心<br />游子将通过童年预约的乡思<br />在月光里俯仰怅望<br />于是听见自己的声音伴着土地的召唤<br />甘蔗田 棉花地 红色的大河<br />外婆家的小桥石榴．．．．<br />织成一支魔笛的小曲</p><h3 id="二"><a class="markdownIt-Anchor" href="#二"></a> 二</h3><p>一个古老的诗国<br />有一个白发的诗人<br />拈一片霜的月光<br />凝成一首小诗<br />给所有的孩子们唱<br />一代一代地唱<br />会须一饮三百杯<br />老诗人捞月去了<br />小诗留在月光里悠扬<br />在故乡悠扬<br />在他乡悠扬</p><h3 id="三"><a class="markdownIt-Anchor" href="#三"></a> 三</h3><p>祖父的老花眼镜边<br />折射出菜油灯黄黄的火苗<br />床前明月光<br />疑是地上霜<br />祖父的花白胡子里<br />漏出袅袅烈草烟味的青烟<br />举头望明月<br />低头思故乡<br />爷爷，我会背了。」<br />眼镜后面的眼角上有一点泪<br />胡子后面的嘴里没有牙<br />孩子，玩去吧！」</p><h3 id="四"><a class="markdownIt-Anchor" href="#四"></a> 四</h3><p>床前明月光<br />疑是地 上霜<br />举头 望 望 明 明 月<br />低头 思故 思故 思故乡<br />床前月光<br />疑地上霜<br />举头明月<br />低头思乡<br />床前光<br />地上霜<br />望明月<br />思故乡<br />月光<br />是霜<br />望月<br />思乡<br />月<br />霜<br />望<br />乡</p><h3 id="五"><a class="markdownIt-Anchor" href="#五"></a> 五</h3><p>姐姐 你还记得吗？<br />在月光里<br />你曾玲珑地望<br />床前明月光<br />疑是．．．真是．．．<br />真是霜一样的月光呵<br />后面的两句呢？<br />我带它们走了<br />走了半个世纪<br />走到没有土瓜和鸡棕的地方<br />没有麦粑粑和过桥米线．．．．<br />举头望明月<br />低头．．．举头．．．</p><h3 id="六"><a class="markdownIt-Anchor" href="#六"></a> 六</h3><p>床前明月光<br />疑是地上霜<br />祖父教的第一首唐诗<br />于是拍着双手<br />踏着院子的石板<br />着迷地唱<br />明月光 地上霜<br />地上霜 明月光<br />孩子已作了祖父<br />过去的孩子在今天的祖父心里<br />顽童一样着迷地唱<br />思故乡 思故乡<br />思故乡 思故乡</p><h3 id="七"><a class="markdownIt-Anchor" href="#七"></a> 七</h3><p>月光里的故乡<br />月明了的故乡<br />故乡时的明月<br />故乡思的月光<br />什么时候起<br />迷作一片朦胧<br />乡 即是 月<br />月 即是 乡<br />迷迷 疑疑<br />望望 茫茫<br />注满眼底<br />溢出眼外<br />月月乡乡<br />圆了的月啊<br />月了的乡</p><h3 id="八"><a class="markdownIt-Anchor" href="#八"></a> 八</h3><p>在时间的那一头<br />在世界的那一头<br />拍着手 拉着手<br />孩子唱<br />望明月 问明月<br />月光光 明月乡<br />在时间的这一头<br />在世界的这一头<br />举头 低头<br />满头霜<br />满头霜<br />满眼老花的月亮<br />满面粼粼的月光</p><h3 id="九"><a class="markdownIt-Anchor" href="#九"></a> 九</h3><p>低头思故乡<br />马锅头他们一定<br />还在横断山脉里<br />横断着山的脊梁<br />高山的风和日敲他们的铜脸<br />水牛一定还在红河水里<br />轻盈地浮沉黑铁的犄角<br />甘蔗的汁比红河水更浓<br />炼成霜色的冰糖<br />每一个结晶的面都闪闪地唱<br />床前明月光</p><h3 id="十"><a class="markdownIt-Anchor" href="#十"></a> 十</h3><p>昨天母亲来信说<br />我好 你好吗？<br />我给母亲回信<br />我好 您好吗？<br />月亮是苍白的<br />月亮不说话<br />故乡比月<br />更远 一倍</p><h3 id="十一"><a class="markdownIt-Anchor" href="#十一"></a> 十一</h3><p>疑是霜 疑是霜<br />悄然落在书页上是一丝闪闪的白发悄然<br />落在书页上不再是青色的发丝了那曾是<br />父亲的白发使我心惊的悄然落在书页上<br />而今是我自己的白发悄然落在书页上而<br />今只有我自己的白发了悄然落在书页上．．<br />举头望 举头望</p><h3 id="十二"><a class="markdownIt-Anchor" href="#十二"></a> 十二</h3><p>低头思故乡<br />我已回去<br />我已回不去<br />我已不回去<br />我已在路上<br />秦时明月汉时关<br />我已渴毙<br />我已骨折<br />丝绸的路<br />骆驼、石头和骷髅的路<br />床前明月光</p><h3 id="十三"><a class="markdownIt-Anchor" href="#十三"></a> 十三</h3><p>床前明月光<br />节节骨痛的床<br />没有床的稻草垫<br />没有稻草的泥地<br />没有泥地的水门汀<br />水湿的枕头<br />火热的枕头<br />没有枕头的<br />惊醒的失眠的<br />眼闪着月光<br />疑是地上霜</p><h3 id="十四"><a class="markdownIt-Anchor" href="#十四"></a> 十四</h3><p>举头望 举头望<br />中秋月从楼影后面探过来<br />圆了白净的脸<br />圆了惊异的眼<br />咦 怎么没有月饼？<br />怎么没有栗子和梨？<br />怎么没有柿子和枣？<br />没有红的蜡烛？<br />没有香炉和香？<br />连圆的桌子也没有<br />握一卷太白诗集在背后<br />静悄悄地<br />月亮看我<br />我看月亮</p><h3 id="十五"><a class="markdownIt-Anchor" href="#十五"></a> 十五</h3><p>好月光 好月光<br />唱一支歌儿吧<br />咱们唱 松花江上<br />唱咱们都会唱的<br />不行 不行<br />我不能唱 我不能唱<br />一唱声音就呜咽了<br />再唱嗓子就哽住了<br />三唱眼晴就什么也看不见了<br />你们唱 我跟着<br />我的家．．．．<br />在．．．．在<br />在东北松花．．．<br />江上．．</p><h3 id="十六"><a class="markdownIt-Anchor" href="#十六"></a> 十六</h3><p>这是诗<br />这是一首诗<br />这是一首中国孩子学的<br />第一首中国诗<br />大家跟我念<br />床前明月光 疑是地上霜<br />举头望明月 低头思故乡<br />熟麦的鬈发<br />海水的眼晴<br />比越女更白<br />琳琅错乱的回声<br />太白 大概 大笑了</p><h3 id="十七"><a class="markdownIt-Anchor" href="#十七"></a> 十七</h3><p>三个孩子到中国去了<br />两个大学生一个中学生<br />只会说小学生的中文<br />第一次见到北京的老祖母<br />献上什么礼物呢？<br />别忘了背一首中国诗<br />床前 明月光<br />疑是 地上霜<br />低头 思 思 思<br />全家人都笑了<br />九十岁的老祖母<br />笑出眼泪来<br />用宽的袖口揩着</p><h3 id="十八"><a class="markdownIt-Anchor" href="#十八"></a> 十八</h3><p>我走<br />我跑<br />我停下来<br />我走<br />我跑<br />我停下来<br />孩子<br />你是干什么啊？<br />妈妈<br />月亮老跟着我</p><h3 id="十九"><a class="markdownIt-Anchor" href="#十九"></a> 十九</h3><p>七十岁的中国人<br />住在赫德森河畔<br />解开领带<br />泡一杯清茶<br />──黄河之水天上来<br />一口乡音未改<br />七十岁的中国人<br />放上电剃刀<br />顾盼两鬓的白发<br />疑是地上霜的白发<br />三千丈<br />缘愁似个长<br />七十一岁的中国人<br />举头霜<br />低头霜<br />黄河长<br />明月乡<br />七十二岁<br />解开领带<br />泡一杯清茶<br />黄河之水天上来<br />弃我去者不复回<br />七十三岁<br />三川雪满魂飞苦<br />蜀道之难天梯石栈明月相钩连<br />何茫然 催心肝<br />七十四 七十五<br />解开领带<br />泡一杯黄河<br />朝如青丝不可留<br />乱我心者暮成雪<br />七十六 七十七<br />拿起电剃刀<br />断水水更流<br />长相思 白云间<br />长相思 彩云间<br />七十八<br />黄河三千丈<br />何处是故乡<br />朝辞去 不复回<br />七十九<br />白发黄河天上来<br />奔流到海不复回<br />八十<br />不复回 不复回<br />黄河<br />黄河<br />天上 天上<br />不复回</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载一首好诗。&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="诗歌" scheme="https://blog.aeilot.top/tags/%E8%AF%97%E6%AD%8C/"/>
    
    <category term="转载" scheme="https://blog.aeilot.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>高楼 幻梦 冰</title>
    <link href="https://blog.aeilot.top/2022/12/21/tower-dream-ice/"/>
    <id>https://blog.aeilot.top/2022/12/21/tower-dream-ice/</id>
    <published>2022-12-21T12:45:09.000Z</published>
    <updated>2022-12-22T02:41:23.545Z</updated>
    
    <content type="html"><![CDATA[<p>去那意识模糊到与现实交织成如糨糊般粘稠一团的地方，看一看那座冰雪的迷宫。同样的幻境，同样的梦。反复。</p><a id="more"></a><p>在不知何时，单手撑在桌上，光略显阴暗。今日或许降了雪，冷风吹进暖气中温热的室内。感觉有点闷。那就索性开窗吧！窗外的世界也没想到那般萧索了，路灯暗下，也几乎见不得什么了，只剩远处的虚空中高楼顶上还亮着的些许红光。但我的耳边听见了风的牧笛，风的萨克斯，风的交响乐。七月的原野上，远方传来的或许也是相似的声音。日光渗到每一棵小草，给予大地无尽的能量。悠扬的笛声从远方飘来，勾引的我的魂魄。</p><p>凭窗伫立，看腻的风景，不过空荡的街道和周而复始的交通灯。这个世界自己在运动。稀疏到几乎没有的车流，来到时还会细致观察车牌。许久之前，当我还是一个好奇的幼儿，我更会细致地看，细致地望，留心每一个细节。那时的光阴，几乎都无法感知到流去的速度。如今却今非昔比了，如今沧海却以变为桑田了。</p><p>整日积攒下来的重负，沉重，酸痛，胀在我的脑中，堆积在我的前额，压下我的双眉，顺着脸庞的线条，刺痛的颈椎，脊椎。之后一股股热流涌动，我的大臂开始无力，我的小腿失去知觉，我的脊背不能承受而弯曲。痛苦地与疲惫对峙，穿过筋疲力尽的峭壁，来到宁静与永恒的内心森林，直到握笔都似有些抖动。我如一位即将消逝为尘土的老者，精神即将消散的睡眠的幻梦中。或许梦是现实世界的暂时崩塌。毕竟当你闭上眼睛，当你与现实断开一切的联系，起初还能感知到的呼吸和身体与棉被、床罩和那一系列柔和的有些滑溜溜的东西接触的感觉，之后又如同肉体抽离了一样的时候，你已经不再以平常的形式存在了。你不存在，你的精神去了另一个世界，幻想的世界。</p><p>眼前已经看不到什么了，只剩下空洞的静穆；耳边不再有音乐，而是无尽的虚空。但我的精神是自由的，可以来往于世界上任何一个角落。我与世界上任何一个人，都建立了一种现实中敢都不敢想，也绝不可能建立的牢固的链接，似乎宇宙大爆炸前就在那里了。是的，就在那里。自由穿行，我被赋予了超越人类的能力。我分不清哪个是现实了。</p><p>眼前是北京香山的枫叶，纽约时代广场的雪花，伦敦的泰晤士河上的游船，香港的高楼。我发现我身处冰块之中；我发现我以我幻想的样子存在，一个本属于我又不属于我的躯体，一个本属于我又不属于我的形态。我发现我回到了生命诞生之前的地方，光产生的地方，回到了万物起源的神圣殿堂。意识是流动的液体，思绪是漂流的枫叶，荡起涟漪。在光的照耀下，意识的水中波光粼粼，荡起水花。每一刻，都有一个人被照亮。他的精神被点亮，他的肉体被点亮，他被点亮。但这不是兰亭，没有流觞曲水的娱乐，更不会有古代的隐者。这是我们内心深处的地方，是我们的灵魂所居的地方，是我们自己又不是我们自己。</p><p>冰块闪耀，封印了几个世纪为被人发觉的胜过世界上任何意见雕塑作品的雕花。冰屋里，透过晶莹又朦胧的冰幕，隔绝又无比接近地走进她的生命，他的生命，你的生命，我的生命。我发现我是所有人，我发现我谁也不是。一个人睡着了便不再有记忆了，因而我感觉我从未存在过。是的，眼前是不真实的谎言。《波西米亚狂想曲》中，未曾被赋予生命的愿景又何尝不是一种解脱？可惜生命被赋予那刻，就无法挽回地注定了，注定了你的一切。走出冰屋，来到一边在永恒之光下流淌不息的意识的河川，每一滴水都是鲜活的生命。这时想起，生命的过程是否是另一种水循环？逆流而上，却发现这条河流绵延。这是一条天河，我永远也达不到终点。</p><p>“嘿！”</p><p>背后有人在呼唤我？转过身去，却只见到模糊的人影。那是我？是过去的我？未来的我？是存在的我？不存在的我？那是我？冰在融化，幻梦在崩塌，冰屋在崩塌，水流在干涸……倏地感觉手心中有一股热流，额上满是热汗，眼前景象仍是虚无和现实的交织。双腿渐渐恢复力量，但是支撑着的手臂已然麻木。这才发觉又回到窗前。</p><p>倚在窗上，这次，离外面的世界更近了，离里面的世界更近了，但这种距离永远不能量化。看向寻常的，现在又不寻常了。曾经有一段时光，甚至希望在遥远的 2011年，失手坠落的自己真的坠落了。消失在自己的过往，如同月下漂浮的烟霭，毕竟是毫不痛苦的。如今却太迟了，已经开启了一趟前往终结的旅途，路途中想都不敢想那一无所有的大限已至的宁静。但那也会是可怕的，就像在迷失的 2021，痛苦地徘徊在现实和虚幻，拿一本书连接起精神和肉体，不真实的世界，敌对的世界，变得和善。如果我不曾活过，周围的一切或许都一如现在一样运作。非也！至少我也改变了身边的人吧。活着，生命灿烂。</p><p>指着天空，什么也没有指向。把窗户开到最大，把音响上的悠扬的爵士乐开到最大！疾风！暴风！狂风！暴雪！暴雨！吹走我的灵魂！洗涤我的灵魂！救赎我的灵魂！我渴望飞向远方，飞向平流层，飞出大气层，飞到外太阳系，飞出宇宙的边界！我的精神没有边界！放下自己的肉体，放下沉重的一切。在梦里我什么都能放下，在醒时我什么都能放下！</p><p>但是梦醒了便不记得梦中事了，但是入梦了就不记得真实了。不过梦也无需要一种理由吧。</p><p>所以睡一觉，回到那个冰屋，什么都有了。</p><p>所以醒一日，把冰屋放在心里，什么都有了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;去那意识模糊到与现实交织成如糨糊般粘稠一团的地方，看一看那座冰雪的迷宫。同样的幻境，同样的梦。反复。&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="散文" scheme="https://blog.aeilot.top/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>RECAP2022: 流星雨</title>
    <link href="https://blog.aeilot.top/2022/12/17/recap/"/>
    <id>https://blog.aeilot.top/2022/12/17/recap/</id>
    <published>2022-12-17T03:45:09.000Z</published>
    <updated>2022-12-26T02:35:15.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>献给 2022，和那错过的英仙座流星雨。</p></blockquote><a id="more"></a><p>什么时候才能在纷繁中寻回真正的自我？—— 可惜已经失去了光阴。险些忘记了今年是何年。</p><p>但是至少 2022 要在我的一生中留下痕迹。</p><p>久立窗前，空洞的夜空。清爽的山泉洗涤了我阴郁中沉沦的灵魂。在父亲上高中的地方，绿茵场上，苦苦等待流星雨。据说8月13号夜里有英仙座流星雨。同一片夜空，同一个世界，不同的时空。那也是我将要作别故乡的一天。</p><p>夜间，清凉的风，在这群山环抱的村落。几天前，或在山泉水侧垂钓，或在县城夜市赶集。体态轻盈，行走如飞，来去匆匆。渐渐懂得《田园》中的乐趣，那跳动的音符正是我山行的步伐。只可惜那谢公已不再，也固然寻不到那登山的木鞋。村落的小巷邂逅多年前见过的人，停留在虚掩的院门，看那猫偷食吊挂的腌鱼。在停电的日子里，远山的轮廓在星空中已经变得模糊，但记忆却变得清晰。烧烤的熏香从千里之外，从数月之前游荡入我的鼻腔、口腔，刺激我的味蕾。</p><p>或许是在汽车上，看着长江三峡的万吨货轮，看碧云蓝天，看千里江山。而在火车上，望着远去的平原，山谷，那幽静的小径和喧闹的都市，水库、太阳能板和干涸的小河。空阔的世界！耳机中流淌出来的柴可夫斯基第一钢琴协奏曲，远行的这现代的人类奇迹！自然奇迹！</p><p>雨水击打在窗上，夕阳斜照在车站的一角，层云化身灰暗的三角，指向遥远的天际。一切都如同离开上海的那天，从台风逃离。突然告知朋友取消明日的骑车旅行。熟悉的路径，就和今年二月一样，也和去年二月一样。走过蜿蜒的林间小道，沿着黄浦江，直上陆家嘴。世博源的火锅？不小心用公筷尝了一口滚烫的牛丸，却惹你们一笑。冒泡的热汤，温暖，深情厚谊在其中升华。下次当然会更小心！不知不觉竟与过去的你对话，却不知道如今同学群却陷入沉寂。毕竟大家都要踏上远行的征途，何日是归期？</p><p>几日前，还在剪辑毕业视频。远程指导录制、演唱，摆好动作，调整姿态。却不记得之前是自招、是中考。雷雨的那天，几乎彻夜未眠，次日早要靠那浓茶。出考场的时候，头晕目眩。</p><p>好在完全没受影响，甚至超常发挥。收到录取通知的那天，正从故乡赶来。计划未来，却不知道初进校园，陌生的地方，甚至有些不习惯。从社恐，到如今向外迈出了几步。新的一年要自信。</p><p>夜间逛校园，远望天鹅湖对岸，确认是否有其他人。雨中漫步，把外套当成雨衣。或许只有我们会傻到这样做。离谱。</p><p>在机房停课学习 OI，一周更五篇博客。逐渐从疫情复苏的国家，重复的网课。今年三月，突然接到通知回家，却是欣喜？自以为是认为可以很好利用时间。谁知开启了摸鱼的生活。也罢，不断调整，欣赏古典音乐，在阳春三月的雨中用最大的音量播放那异国他乡，来自纽约的爵士乐。又忆起时代广场霓虹灯中的雪，可久远的回忆已经变得朦胧。和同学拓展关系，丝毫不觉得临近分别为时过晚。确实有些遗憾吧。但是返校之后，在清晨、黄昏的网约车上，每一种天空，每一个日子。也曾和司机交谈，走近那些不一样的人生。Life is tough. 沉溺在试卷中，却清醒地看见明天——我离未来最近的一段时光。和你在网上打卡拍摄天空，可惜现在不知道你身处何方。</p><p>十二月的天空，有些许凄清。准备英才计划，还是刚刚得知 NOIP 一等的消息。临近圣诞，或许在某个平行宇宙，在永恒的过去的 2021，还有一些人在夜间的校园长跑。或许望着校门外的灯火，会在寒风中拿出手机，播放那一曲 Merry Christmas，会大声祝福：”马上 2022 了，一切会更好的！“ 2021对我是痛苦的，但我确实有所得。</p><p>幸运的是，如今也应该会有这样的声音。Merry Christmas。</p><p>回到山间，记忆中的气味逼近。是外婆。是外公夜间骑摩托回到山上的家，留下外婆给我们送行。是远处已经远到看不见的灯火亮起，亲朋好友在农闲时刻欢聚。是院中的雏鸡、猪羊。想起那个在农家小院里，看着天空，乱按计算器的日子。</p><p>躺在乡间某个高中的足球场上，嗅着草香，意识游离。等待流星雨，痛恨没把相机带在身边。一颗，两颗，三颗……但只见得满天星斗，似乎有什么东西闪过，若隐若无。那天或许没有流星雨，但眼前的镜像模糊了，变成了一团，渐渐看不真切了。</p><p>醒来时在上海，2022年，12月，17日。</p><p>不知如何评价这一年，但是我将要改变了，但是我确实改变了。希望明年不要再把 2023 错认成 2022。我存在过，每一年我都存在过。Carpe diem。</p><p>2023会更好。</p><p>Restart.</p><p>至少还会有流星雨。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;献给 2022，和那错过的英仙座流星雨。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="情感" scheme="https://blog.aeilot.top/tags/%E6%83%85%E6%84%9F/"/>
    
    <category term="散文" scheme="https://blog.aeilot.top/tags/%E6%95%A3%E6%96%87/"/>
    
    <category term="年度回顾" scheme="https://blog.aeilot.top/tags/%E5%B9%B4%E5%BA%A6%E5%9B%9E%E9%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>清夜</title>
    <link href="https://blog.aeilot.top/2022/12/12/moonlight/"/>
    <id>https://blog.aeilot.top/2022/12/12/moonlight/</id>
    <published>2022-12-12T09:45:09.000Z</published>
    <updated>2022-12-13T01:40:11.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>月起晚风拂，萤光碎火流；不知明朝复今夕。</p></blockquote><a id="more"></a><p>月升，微光照过灰色的十二月的天空。十二月了？可我的意识还停留在那个蝉鸣的六月。</p><p>门外有孩童在嬉戏；远方的地铁列车飞驰，发出空气摩擦的空洞声响；窗外昏黄的路灯仍然用橙黄的光将树染成怀旧的颜色——这一切，像四月。池塘还是静穆，那轮明月依旧悬在明朗的夜空。</p><p>九天之上或许有天宫？都说天上一日，地上十年。或许仙人也总是逍遥。也能想象，在远方的故乡，农夫或许刚刚回到土屋之中，嗅着空气中带着的泥土的香味，在冉冉升起的炊烟中休憩。鸡犬相闻，微风吹过树梢，远山的巨大影子和繁星点点……蜿蜒的山路，还有车辆往来。引擎发出那种低沉的连续的声响。山脚下，家家户户的灯亮起，家家户户的灯熄灭……</p><p>但那都不是我。记忆跟不上遗忘的步伐，时间的乡愁却见渐变得浓烈。我甚至记不起2021年。多少的过去在时光中淡去，但是那些人和事却在遗忘中永恒。留不住的。</p><p>月光皎洁，星海荡漾，旋转、流动。高压线塔的轮廓依稀可辨，却和梦的幻境交织结合。久远的夏日，我曾望着远山，那山的轮廓模糊。或许那是 2013，或许是 2015，和早已消散在时光里的故人在山间漫步。甚至认为这是前世的记忆。熟悉的面容在时间里溶解。</p><p>一颗明星划过星野，远处市中心的灯光依旧灿烂。在回乡的火车上，我看到粉红色、橙红色渐变到深邃的夜的蓝。远行的高铁列车上，我欣赏着昼的关闭，夜的开启。群山、平原、天空、城市、乡村都以让人眼花缭乱的速度划过眼前，连成一线。我要离了我的故乡了。</p><p>那是在深秋，操场跑道铺了一层金黄色的树叶的地毯。夜空清澈，一群学生在长跑。深红色跑道、浅黄色的教学楼、深棕色的长椅和一排绿色的松树，在黑夜中却显出一个颜色。校门外的灯火被绿树的高墙阻隔。但透过升腾着的吸气、呼气的雾霭，少年的歌声嘹亮。如今或许看不到这样的学生了？当年，这样的夜晚却不啻那一天。或许很快，我也终说不去那些人的姓名。</p><p>错乱的时空。</p><p>月升，水汽中迷蒙的窗，映着我的面容。给我开一壶良药，复活我逝去的时光。我的过去已死，如果再来，我想我仍会这样选择。</p><p>也罢，往事如烟。</p><blockquote><p>后记：分了两天写，所以有衔接不连贯（</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;月起晚风拂，萤光碎火流；不知明朝复今夕。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="情感" scheme="https://blog.aeilot.top/tags/%E6%83%85%E6%84%9F/"/>
    
    <category term="散文" scheme="https://blog.aeilot.top/tags/%E6%95%A3%E6%96%87/"/>
    
    <category term="天气日记" scheme="https://blog.aeilot.top/tags/%E5%A4%A9%E6%B0%94%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>割点 Tarjan 算法</title>
    <link href="https://blog.aeilot.top/2022/12/04/cut-vertex/"/>
    <id>https://blog.aeilot.top/2022/12/04/cut-vertex/</id>
    <published>2022-12-04T04:45:09.000Z</published>
    <updated>2023-01-14T13:59:12.814Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习图论，写篇题解记录一下。</p><a id="more"></a><h2 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h2><ul><li>对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。</li></ul><p>这篇博客主要介绍，Tarjan 算法用于求 割点。</p><h2 id="割点"><a class="markdownIt-Anchor" href="#割点"></a> 割点</h2><p>Tarjan 算法，记录 节点访问时间戳 <code>dfn</code>，节点能够回溯到的最早的点的时间戳 <code>low</code>。</p><p>对于某一点：</p><ol><li>如果这个点是根节点，且有两个以上与它相连的连通分量，那这个点就是割点。</li><li>如果某个点后继是一个连通分量，而这个点不是根节点，那这个点是割点。</li></ol><h3 id="第一种情况"><a class="markdownIt-Anchor" href="#第一种情况"></a> 第一种情况</h3><p>我们需要记录根节点 <code>fa</code>，在遍历的时候，如果重复访问到了 <code>fa</code>，说明找到了 <code>fa</code> 下面的一个连通分量。</p><h3 id="第二种情况"><a class="markdownIt-Anchor" href="#第二种情况"></a> 第二种情况</h3><p>设当前点 <code>s</code>，对于访问的下一个节点 <code>y</code>：</p><p>如果 <code>low[y] &gt;= dfn[s]</code>，说明这个点下面有一个连通分量。</p><p>注：这里类似于 Tarjan 求 SCC 时，我们所做的 <code>min(low[s],dfn[y])</code>。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    dfn[s] = low[s] = ++cc;</span><br><span class="line">    <span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[s]; i!=<span class="number">-1</span>; i=NDS[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> y = NDS[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y,fa);</span><br><span class="line">            low[s] = <span class="built_in">min</span>(low[s], low[y]); <span class="comment">// 回溯后更新</span></span><br><span class="line">            <span class="keyword">if</span>(low[y]&gt;=dfn[s] &amp;&amp; s != fa) <span class="comment">// 情况 2</span></span><br><span class="line">                cut[s] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s==fa) <span class="comment">// 情况 1 计数</span></span><br><span class="line">                child++;</span><br><span class="line">        &#125;</span><br><span class="line">        low[s] = <span class="built_in">min</span>(low[s], dfn[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(child&gt;=<span class="number">2</span>&amp;&amp;s==fa)&#123;</span><br><span class="line">        cut[s] = <span class="number">1</span>; <span class="comment">// 情况 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近学习图论，写篇题解记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="图论" scheme="https://blog.aeilot.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>P3147 USACO16OPEN 262144 P 题解</title>
    <link href="https://blog.aeilot.top/2022/11/24/P3147-262144P/"/>
    <id>https://blog.aeilot.top/2022/11/24/P3147-262144P/</id>
    <published>2022-11-24T02:45:09.000Z</published>
    <updated>2022-11-24T03:59:14.257Z</updated>
    
    <content type="html"><![CDATA[<p>DP 系列。</p><a id="more"></a><h2 id="题面"><a class="markdownIt-Anchor" href="#题面"></a> 题面</h2><p>看题，<a href="https://www.luogu.com.cn/problem/P3147">Luogu</a></p><p>合并相邻的相同数字，变成数字加一。求获得的最大值。</p><h2 id="思考"><a class="markdownIt-Anchor" href="#思考"></a> 思考</h2><p>最初想到的是基础的区间 DP，不做解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>; len&lt;=N; len++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i+len<span class="number">-1</span>&lt;=N; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> y = i+len<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k&lt;y; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(DP[i][k] == DP[k+<span class="number">1</span>][y])&#123;</span><br><span class="line">                DP[i][y] = <span class="built_in">max</span>(DP[i][y], DP[i][k] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, DP[i][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>但是 $ 2 \leq n \leq 262144 $ ，显然会 MLE。</p><h2 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h2><p>借鉴思路，我们发现可以使用类似倍增的方法去做。</p><p>用状态 <code>f[i][j]</code> 表示 合成之后结果为 i，右端点为 j 的区间的左端点位置，如果 值为 0 即 不可行。</p><p>因为题目要找两个相邻相等的区间，合成。有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f[i][j] = f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]];</span><br><span class="line"></span><br><span class="line">把 f[i][j] 拆分成两个能合成为 i<span class="number">-1</span> 的区间</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                 f[i<span class="number">-1</span>][j]</span><br><span class="line">    |------&lt;i<span class="number">-1</span>&gt;-----|----&lt;i<span class="number">-1</span>&gt;-----|</span><br><span class="line">    j                      f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]] </span><br><span class="line"></span><br><span class="line">如果 f[i<span class="number">-1</span>][j] 或 f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]] 不成立，f[i][j] 就不成立，即转移为 <span class="number">0</span></span><br></pre></td></tr></table></figure><p>那如何表示结果？</p><p>记录 <code>ans</code>，如果 <code>f[i][j]</code> 可行，就更新 <code>ans</code>。因为 <code>i</code> 递增，所以不需要 <code>max</code> 操作。</p><p>得到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">2</span>; i&lt;=<span class="number">58</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=N; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!DP[i][j])&#123;</span><br><span class="line">            DP[i][j] = DP[i<span class="number">-1</span>][DP[i<span class="number">-1</span>][j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(DP[i][j])&#123;</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意我们倍增合并，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>262144</mn><mo>+</mo><mn>40</mn><mo>=</mo><mn>58</mn></mrow><annotation encoding="application/x-tex">log_2{262144} + 40 = 58</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="mord">6</span><span class="mord">2</span><span class="mord">1</span><span class="mord">4</span><span class="mord">4</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">8</span></span></span></span> 是可能获得的最大值。</p><h3 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h3><p>显然不合并是可行的，所以在输入的时候，初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> in;</span><br><span class="line">    cin &gt;&gt; in;</span><br><span class="line">    DP[in][i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>i+1</code>：为了避免区间重复，我们 <code>f[i][j]</code> 表示的区间是左闭右开区间，所以右端点是 <code>i+1</code></p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>这道题是区间 DP 状态优化，DP 学习之路漫漫，还需要多加练习。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;DP 系列。&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="DP" scheme="https://blog.aeilot.top/tags/DP/"/>
    
    <category term="区间" scheme="https://blog.aeilot.top/tags/%E5%8C%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>P3354 Riv 河流 题解</title>
    <link href="https://blog.aeilot.top/2022/11/23/riv-p3354/"/>
    <id>https://blog.aeilot.top/2022/11/23/riv-p3354/</id>
    <published>2022-11-23T02:45:09.000Z</published>
    <updated>2022-11-24T02:21:29.991Z</updated>
    
    <content type="html"><![CDATA[<p>最近在练树形 DP，正好看到 <a href="https://www.luogu.com.cn/problem/P3354">这一道</a> 虚标的紫题，但本蒟蒻不会写，想出来了便记录一下</p><a id="more"></a><h2 id="题面-思考"><a class="markdownIt-Anchor" href="#题面-思考"></a> 题面 &amp; 思考</h2><p>先看题面，一颗有根树，选定 k 个节点作为 ”伐木场“，求运送木料最小费用。注意木料费用是 <code>dis * wood</code>。</p><p>最开始想到简单的树形背包，状态转移方程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[i][k] = <span class="built_in">min</span>(f[j][s] + cost, f[i][k]);</span><br></pre></td></tr></table></figure><p>但是注意到，如果某个后代节点如果是伐木场，cost 不需要计算，所以状态中还需要存储后代的伐木场情况。</p><p>但是后代中锯木厂不止一个。考虑到树有唯一的父亲，且同一深度祖先唯一，可以记录最近的伐木场祖先，作为状态的一部分。</p><p>有 <code>f[i][j][k]</code> 即 i 节点 最近的伐木场祖先为 j，后代（不算自己）有 k 个是伐木场。</p><p>但是由于 f 自己也可能是伐木场，转移方程不同，需要分类讨论，于是改成：<code>f[i][j][k][0/1]</code> 其中 0 代表自己<strong>不是</strong>伐木场， 1 表示自己<strong>是</strong>伐木场。</p><h2 id="状态转移方程"><a class="markdownIt-Anchor" href="#状态转移方程"></a> 状态转移方程</h2><p>因为我们需要枚举祖先，在 DFS 时需要记录 Fa 数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DFS 开始时：fa[++tot] = x;</span><br><span class="line"></span><br><span class="line">结束时：tot--;</span><br></pre></td></tr></table></figure><p>简单记录祖先 stack。</p><p>回溯后，对于当前节点 <code>x</code> 和 子节点 <code>y</code> 每个祖先 <code>ff</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先对每个 k 赋初值，对于每种伐木场个数 l：</span><br><span class="line">f[x][ff][l][<span class="number">0</span>] += f[y][ff][<span class="number">0</span>][<span class="number">0</span>]; --&gt; 当前节点不是伐木场，子节点 y 最近伐木场为 l，对任意 f，赋最大值，即 子结点中没有伐木场。</span><br><span class="line"></span><br><span class="line">f[x][ff][l][<span class="number">1</span>] += f[y][x][<span class="number">0</span>][<span class="number">0</span>]; --&gt; 当前节点是伐木场，子节点 y 最近伐木场为 当前节点，对任意 f，赋最大值，即 子结点中没有伐木场。</span><br></pre></td></tr></table></figure><p>然后就是树形背包：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f[x][ff][l][<span class="number">0</span>] = <span class="built_in">min</span>(f[x][ff][l][<span class="number">0</span>], f[x][ff][l-s][<span class="number">0</span>] + f[y][ff][s][<span class="number">0</span>]); --&gt; 当前节点不是伐木场，对 y 节点分配 s 个伐木场个数</span><br><span class="line">f[x][ff][l][<span class="number">1</span>] = <span class="built_in">min</span>(f[x][ff][l][<span class="number">0</span>], f[x][ff][l-s][<span class="number">1</span>] + f[y][x][s][<span class="number">0</span>]); --&gt; 当前节点是伐木场，对 y 节点分配 s 个伐木场个数</span><br><span class="line"></span><br><span class="line">唯一的不同是 y 节点最近祖先为 x</span><br></pre></td></tr></table></figure><p>注意在枚举 l 时，由于是01背包，需要倒过来枚举，不然状态计算会叠加。（很容易理解）</p><p>做完了？好像还差一个 cost！</p><p>考虑到 祖先节点 <code>ff</code> cost 的贡献，因为是 当前节点 W 乘以 到 <code>ff</code> 的总距离！</p><p>需要计算总距离，维护 <code>dep</code> 数组，即当前节点到根节点距离，即可！很容易理解。<code>ff</code> 到 <code>x</code> 的距离就是 <code>dep[x] - dep[ff]</code></p><p>对于当前节点 <code>x</code> 每一个祖先 <code>ff</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(l&gt;=<span class="number">1</span>)&#123; --&gt; 因为 l 需要 <span class="number">-1</span> ，要分类讨论。</span><br><span class="line">    f[x][ff][l][<span class="number">0</span>] = <span class="built_in">min</span>(f[x][ff][l][<span class="number">0</span>] + W[x] * (dep[x]-dep[ff]), f[x][ff][l][<span class="number">1</span>]);</span><br><span class="line">    合并 <span class="number">0</span> 和 <span class="number">1</span>，因为回溯之后，<span class="number">1</span> 的状态不再被使用，便于下一步计算。</span><br><span class="line">    <span class="number">-1</span> 是因为上文 f[x][ff][l][<span class="number">1</span>] = <span class="built_in">min</span>(f[x][ff][l][<span class="number">0</span>], f[x][ff][l-s][<span class="number">1</span>] + f[y][x][s][<span class="number">0</span>]); 时，s+l-s = l 但是当前节点也是伐木场，所以状态更新是 l+<span class="number">1</span> 的，要 <span class="number">-1</span> 获取正确结果</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    l = <span class="number">0</span> 时，当前节点不可能为伐木场，直接添加到 ff 增加的贡献</span><br><span class="line">    f[x][ff][l][<span class="number">0</span>] += W[x] * (dep[x]-dep[ff]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再来聊一聊合并。为了便于讨论，上文背包转移的时候，我们没有考虑 <code>y</code> 的 1 的情况，而是在每次 <code>y</code> 回溯时 合并 0 和 1。这有点类似于滚动数组？回溯后 <code>0</code> 不再表示之前的意义，而是我们最初设计的状态：i 节点 最近的伐木场祖先为 j，后代（或自己）有 k 个是伐木场！</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, d;</span><br><span class="line">&#125; NDS[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[<span class="number">201</span>], vis[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> W[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    NDS[cnt].to = b;</span><br><span class="line">    NDS[cnt].next = head[a];</span><br><span class="line">    NDS[cnt].d = d;</span><br><span class="line">    head[a] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">201</span>][<span class="number">201</span>][<span class="number">52</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dep[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    fa[++tot] = x;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i != <span class="number">-1</span>; i = NDS[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = NDS[i].to;</span><br><span class="line">        <span class="keyword">if</span> (vis[y]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[y] = dep[x] + NDS[i].d;</span><br><span class="line">        <span class="built_in">dp</span>(y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = tot; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">int</span> ff = fa[j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = k; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">                f[x][ff][l][<span class="number">0</span>] += f[y][ff][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                f[x][ff][l][<span class="number">1</span>] += f[y][x][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> s = l; s&gt;=<span class="number">0</span>; s--)&#123;</span><br><span class="line">                    f[x][ff][l][<span class="number">0</span>] = <span class="built_in">min</span>(f[x][ff][l][<span class="number">0</span>], f[x][ff][l-s][<span class="number">0</span>] + f[y][ff][s][<span class="number">0</span>]);</span><br><span class="line">                    f[x][ff][l][<span class="number">1</span>] = <span class="built_in">min</span>(f[x][ff][l][<span class="number">1</span>], f[x][ff][l-s][<span class="number">1</span>] + f[y][x][s][<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> ff = fa[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = k; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">                f[x][ff][l][<span class="number">0</span>] = <span class="built_in">min</span>(f[x][ff][l][<span class="number">0</span>] + W[x] * (dep[x]-dep[ff]), f[x][ff][l<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                f[x][ff][l][<span class="number">0</span>] += W[x] * (dep[x]-dep[ff]);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; x &lt;&lt; &quot; &quot;&lt;&lt;ff &lt;&lt; &quot; &quot;&lt;&lt; l &lt;&lt; &quot; &quot; &lt;&lt; f[x][ff][l][0] &lt;&lt; &quot; &quot; &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; dep[x] &lt;&lt; endl;</span></span><br><span class="line">    tot--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Type your code here</span></span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> w, v, d;</span><br><span class="line">        cin &gt;&gt; w &gt;&gt; v &gt;&gt; d;</span><br><span class="line">        W[i] = w;</span><br><span class="line">        <span class="built_in">add</span>(i, v, d);</span><br><span class="line">        <span class="built_in">add</span>(v, i, d); <span class="comment">// 链式前向星</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dp</span>(<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; f[<span class="number">0</span>][<span class="number">0</span>][k][<span class="number">0</span>] &lt;&lt; endl; <span class="comment">// 输出结果，注意是 合并后，所以是 0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在练树形 DP，正好看到 &lt;a href=&quot;https://www.luogu.com.cn/problem/P3354&quot;&gt;这一道&lt;/a&gt; 虚标的紫题，但本蒟蒻不会写，想出来了便记录一下&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="DP" scheme="https://blog.aeilot.top/tags/DP/"/>
    
    <category term="树" scheme="https://blog.aeilot.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>马拉车算法</title>
    <link href="https://blog.aeilot.top/2022/11/20/manacher/"/>
    <id>https://blog.aeilot.top/2022/11/20/manacher/</id>
    <published>2022-11-20T09:45:09.000Z</published>
    <updated>2022-11-21T03:02:03.643Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习马拉车算法，简单记录一下心得。（如有疏漏，请指出</p><a id="more"></a><p>先看 <a href="https://www.luogu.com.cn/problem/P3805">模板题</a> ，要求最长回文串的长度。</p><p>首先思考朴素算法，显然是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，无法通过。而马拉车算法能将时间复杂度优化到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><h2 id="性质"><a class="markdownIt-Anchor" href="#性质"></a> 性质</h2><ul><li>对于一个回文字符串，必然有一个对称中心，在对称中心两侧的部分均全等。</li><li>一个回文字符串对称之后得到的一定也是回文字符串<br />即 aba <strong>x</strong> aba<ul><li>但是对于奇数、偶数长度的回文字符串，这个对称中心可能是字符，也可能在两个字符中间。<br />如：ab <strong>|</strong> ba, a <strong>b</strong> a</li></ul></li></ul><p>所以考虑，在两个字符中间都插入隔板 <code>#</code>，即 <code>abba</code> 变成 <code>#a#b#b#a#</code>。原长度为 <code>n</code> 的字符串，增加 <code>n+1</code> 隔板，长度变成 <code>2n+1</code> 必然是奇数，方便统计。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>马拉车算法，即记录一直最长回文子串区间，对朴素算法进行优化。</p><p>因为是朴素算法两侧向外拓展，隔板对判断回文无影响。<code>p[i]</code> 数组存储以 <code>str[i]</code> 为对称中心的回文字符串半径长度。半径长度中计算了隔板个数，所以得到的就是回文字符串长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">-1</span>;i&lt;s2.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (i&gt;r)? <span class="number">1</span> : <span class="built_in">min</span>(p[l+r-i], r-i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">0</span> &lt;= i-k &amp;&amp; i+k&lt;s2.<span class="built_in">size</span>() &amp;&amp; s2[i-k]==s2[i+k])&#123;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    p[i] = --k; <span class="comment">// 注意最后一次循环会对加上一个 1</span></span><br><span class="line">    <span class="keyword">if</span>(i+k&gt;r)&#123;</span><br><span class="line">        l = i-k;</span><br><span class="line">        r = i+k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先记录 <code>i</code>，枚举每个对称中心，记录 <code>l</code> 和 <code>r</code> 即目前最长回文字符串的左右端点。<code>k</code> 则是目前半径长度。</p><p>算法主体就是朴素算法，向左右两端拓展。</p><p>考虑优化。如果<code>i</code>处在一个回文子串中，因为对称性，可以得到与<code>i</code>对称的点<code>j</code>的最长回文串长度。因为<code>i</code>不断增加，对称的点的坐标一定小于<code>i</code>即已经更新过。</p><p>由于上文推断的性质，回文子串可以对称得到。注意单个字符也可以考虑成一个回文子串。所以 <code>k</code> 可以从 之前的 <code>p[j]</code> 开始计算。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(设 x 表示 [l,r] 对称中心，j 就是 i 关于 x 的对称点)</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 案例1</span><br><span class="line">l       r</span><br><span class="line"><span class="section">#a#b#b#a#</span></span><br><span class="line">  ^ ^ ^</span><br><span class="line">  j x i</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 案例2</span><br><span class="line">l     r</span><br><span class="line"><span class="section">#a#b#a#b#a#b#a#</span></span><br><span class="line">   ^   ^   ^</span><br><span class="line">   j   x   i</span><br><span class="line"></span><br><span class="line">手推方便理解</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后考虑如何计算 <code>j</code>，因为中点坐标公式，得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>l</mi><mo>+</mo><mi>r</mi></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mrow><mi>i</mi><mo>+</mo><mi>j</mi></mrow><mn>2</mn></mfrac><mo>=</mo><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">\frac{l+r}{2} = \frac{i+j}{2} = mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.252772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.907772em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span> ，得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>=</mo><mi>l</mi><mo>+</mo><mi>r</mi><mo>−</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">j = l+r-i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>。</p><p>但是因为确定区间，且偶数情况存在。所以还应判断 <code>j</code> 是否在区间内。</p><p>而如果不在区间内，很显然应该从<code>1</code>开始枚举。</p><p>所以得到：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k = (i&gt;r)? <span class="number">1</span> : <span class="built_in">min</span>(p[l+r-i], r-i+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>每次更新 <code>l</code> <code>r</code> 区间长度即可。</p><h2 id="ac-code"><a class="markdownIt-Anchor" href="#ac-code"></a> AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">110000001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Type your code here</span></span><br><span class="line">    string s1;</span><br><span class="line">    cin &gt;&gt; s1;</span><br><span class="line">    string s2;</span><br><span class="line">    s2.<span class="built_in">resize</span>(s1.<span class="built_in">size</span>()*<span class="number">2</span>+<span class="number">4</span>);</span><br><span class="line">    s2[<span class="number">0</span>] = <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    s2[<span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j=<span class="number">2</span>; i&lt;s1.<span class="built_in">size</span>(); i++, j+=<span class="number">2</span>)&#123;</span><br><span class="line">        s2[j] = s1[i];</span><br><span class="line">        s2[j+<span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">-1</span>;i&lt;s2.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> k = (i&gt;r)? <span class="number">1</span> : <span class="built_in">min</span>(p[l+r-i], r-i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">0</span> &lt;= i-k &amp;&amp; i+k&lt;s2.<span class="built_in">size</span>() &amp;&amp; s2[i-k]==s2[i+k])&#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">        p[i] = k;</span><br><span class="line">        <span class="keyword">if</span>(i+k&gt;r)&#123;</span><br><span class="line">            l = i-k;</span><br><span class="line">            r = i+k;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>马拉车算法实用且容易理解，但熟练掌握还需要练习。</p><p><a href="https://www.luogu.com.cn/problem/P4555">作业 | 最长双回文串</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学习马拉车算法，简单记录一下心得。（如有疏漏，请指出&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="模版" scheme="https://blog.aeilot.top/tags/%E6%A8%A1%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>夜雨</title>
    <link href="https://blog.aeilot.top/2022/11/18/rain-at-night-1/"/>
    <id>https://blog.aeilot.top/2022/11/18/rain-at-night-1/</id>
    <published>2022-11-18T03:45:09.000Z</published>
    <updated>2022-11-22T14:38:23.142Z</updated>
    
    <content type="html"><![CDATA[<p>太久没更博客了，别来无恙</p><a id="more"></a><blockquote><p>2020.11.16 日夜雨有感，18日记</p></blockquote><p>夜雨一直下，下在这小城的一隅。</p><p>从广场走出，漆黑一片，不远处却是车水马龙，仿佛隔了一个世界。雨伞下，近乎看不清的霓虹渐明了。但此刻我只见到微光下如丝的雨和它有节奏地击打在伞面上的声音。</p><p>这是冬日的雨，路旁伫立，晶莹的雨点散在大衣的绒毛上，形成了彩色的泪珠。我知道这和去年此刻的景一样。伫立，长叹，冉冉升起的白色雾霭是对这喧嚣的叛逆。</p><p>风起，微寒，但雨下如同泪涟涟，不知何时终了。</p><p>上了车，向车后望去，移动的灯火与车流、人流，在夜的深邃中，形成红色的流动的丝绸飘带。车窗外的世界总是呈现怀旧的昏黄，而这生活的千篇一律着实让人麻木。在自己的热爱织成的茧中窒息，在对旧日的追忆中迷失。西西弗斯式地在单调中沉沦，无可救药，我亲手造成了自我的慢性自杀。</p><p>脑海中涌动的昨日，如同白纸，毫无意义。微寒，放松，我似乎又找回了去年此刻的心境。身体却是轻盈，御风而行，泠然善也。我知道过去成就今日，而此刻我仍然陷入迷茫却清醒的叠加态，是循环往复的轮回的孤独。</p><p>窗外的雨一如去年、前年、渐渐被忘却的过往，落地就无法挽回的过往。那些，我已经找不到了，于是只能叹息。这是人生最大的 BUG，过去的就不能再来，经历就是一种失去。</p><p>人生。</p><p>改变？</p><p>一切尽在车窗外夜雨的缄默里。</p><p>而我。</p><p>我还是我吗？</p><p>这些话，何止今日说起过呢？</p><p>换一种思维方式，换一种生活，换一种人生，突破过去的茧，重获新生。</p><p>人生不再千篇一律。真正的自我解放。</p><p>但夜雨不会停。因为没有办法让它停下来。</p><p>但天亮了就会是新的一天。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;太久没更博客了，别来无恙&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="情感" scheme="https://blog.aeilot.top/tags/%E6%83%85%E6%84%9F/"/>
    
    <category term="散文" scheme="https://blog.aeilot.top/tags/%E6%95%A3%E6%96%87/"/>
    
    <category term="天气日记" scheme="https://blog.aeilot.top/tags/%E5%A4%A9%E6%B0%94%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>层雾</title>
    <link href="https://blog.aeilot.top/2022/11/11/the-fog-1/"/>
    <id>https://blog.aeilot.top/2022/11/11/the-fog-1/</id>
    <published>2022-11-11T03:45:09.000Z</published>
    <updated>2022-12-20T06:14:50.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>花非花，雾非雾。夜半来，天明去。来如春梦几多时，去似朝云无觅处。</p></blockquote><a id="more"></a><p>今晨，上海下着一场大雨，天色阴沉。窗上蒙了一层水汽，更远处便是层层雾霭之下的昔日无比熟悉的河川景致。</p><p>出门。雨敲击在雨伞上发出有节奏的声音，四周也有些许走着的行人。但这些都离我太远了。雨带给我的只有那本就属于我的失意。</p><p>回想 2020 到现在，时光匆匆，几乎不能感知时光的流逝。但它终究还是溜走了！而且似乎在一瞬间！旧日的一幕幕，如今还在疾速流去的时光之河。我想让它停下来，是的一定要停下来。反复思索，琢磨，这样在低沉中的循环是否是生命的本质，诘问我们是否真的有能力改变我们的未来，改变命运的走向。或许掌握仅仅是自我麻醉。我们或许从未掌控过什么。也许我们仅仅是回忆，也许我们从未存在，也许我们存在过，也许眼前的一切都是虚幻。没有人知道答案。</p><p>层雾遮盖住眼前的道路，看向四周的人。我总觉得陌生，而无所适从，总觉得不安。毕竟在层雾中的人，找不到方向。我好像从来都没有得到内心深处的满足，从未有过，在短暂的逝去的岁月里。未来也不会有吧？毕竟我们没有能力决定我们的来去，甚至连自己最基本的属性都不能决定，没有能力。我们的开场都是天命。</p><p>到了。站立在灯光微弱的走廊里，四周是一片空虚。时间太早了，没有什么人。</p><p>人生是这样吗？逝去的岁月是这样吗？</p><p>“花非花，雾非雾。夜半来，天明去。来如春梦几多时，去似朝云无觅处。”</p><p>也许是我沉溺在对无意义的追索中，或者仅仅是过去的痛苦太愉快了，又或者是我已经被单调麻醉？生活最初的样子？</p><p>忽然来了两个孩童，蹦起来按下电灯开关。</p><p>眼前一片明朗，就像昨日的阳光。</p><p>”也许明天也是这样。“</p><p>谁知道呢？但是 C’est la vie.</p><p>层雾，……</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;花非花，雾非雾。夜半来，天明去。来如春梦几多时，去似朝云无觅处。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="情感" scheme="https://blog.aeilot.top/tags/%E6%83%85%E6%84%9F/"/>
    
    <category term="散文" scheme="https://blog.aeilot.top/tags/%E6%95%A3%E6%96%87/"/>
    
    <category term="天气日记" scheme="https://blog.aeilot.top/tags/%E5%A4%A9%E6%B0%94%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>从愚人节玩笑到真的玩笑(bushi): 浅谈 lsnotes</title>
    <link href="https://blog.aeilot.top/2022/04/15/lsnotes/"/>
    <id>https://blog.aeilot.top/2022/04/15/lsnotes/</id>
    <published>2022-04-14T22:45:09.000Z</published>
    <updated>2022-04-15T00:38:24.260Z</updated>
    
    <content type="html"><![CDATA[<p>离了个大谱 (不过这个想法挺好的</p><a id="more"></a><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>愚人节本来是开玩笑的，结果发现，挺有用。笑死</p><p>前几天和朋友讨论，说要给每个目录加个提示语，<code>ls</code> <code>pwd</code> <code>cd</code> 这些命令时显示出来。</p><p>e.g.:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">The place <span class="built_in">where</span> I code!</span><br><span class="line">---</span><br><span class="line">Demo  OI  Playground  Projects</span><br></pre></td></tr></table></figure><p>这样就解决了，目录那么多，自己甚至都忘了这个干啥了的情况。当然，还有很多其他的用法，比如可以在 <code>.lsnotes</code> 中显示 build 方式。</p><h2 id="概况"><a class="markdownIt-Anchor" href="#概况"></a> 概况</h2><p><code>lsnotes</code> 是个<s>水项目</s>，目前只支持纯文本显示（未来会加上 Markdown 解析，短时间内先鸽了。</p><p>就目前的代码量而言，小学生都会写…</p><h2 id="后续"><a class="markdownIt-Anchor" href="#后续"></a> 后续</h2><p><a href="https://github.com/MrWillCom">MrWillCom</a> 又做了一个更强的 <code>lsnotes</code> 即 <a href="https://github.com/MrWillCom/lnn">lnn</a>。</p><p>这个项目功能简单，但实用，未来不怎么会维护了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;离了个大谱 (不过这个想法挺好的&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://blog.aeilot.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="GitHub" scheme="https://blog.aeilot.top/tags/GitHub/"/>
    
    <category term="项目" scheme="https://blog.aeilot.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>题解 纪念品分组</title>
    <link href="https://blog.aeilot.top/2021/10/01/Luogu-P1094/"/>
    <id>https://blog.aeilot.top/2021/10/01/Luogu-P1094/</id>
    <published>2021-10-01T05:45:09.000Z</published>
    <updated>2021-10-01T11:48:47.710Z</updated>
    
    <content type="html"><![CDATA[<p>快要 CSP-S2 了，复习一下一些算法（弄文化课弄了好久了，很多东西都要忘了。。。</p><a id="more"></a><h2 id="读题"><a class="markdownIt-Anchor" href="#读题"></a> 读题</h2><p><a href="https://www.luogu.com.cn/problem/P1094">题目链接: Luogu P1094</a></p><p>看题，<strong>把购来的纪念品根据价格进行分组，但每组最多只能包括两件纪念品</strong>。看样子，应该是贪心。每次取一个大的，一个小的，就可以保证了。如果大的小的组合起来，超过了最大值，就只取大的。</p><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题</h2><p>很容易就可以写出程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">30001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, w;</span><br><span class="line">    cin &gt;&gt; w &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; ar[i];</span><br><span class="line">    <span class="built_in">sort</span>(ar, ar + n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &gt;= l) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ar[l] + ar[r] &lt;= w) &#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r--;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="证明"><a class="markdownIt-Anchor" href="#证明"></a> 证明</h2><p>可以参考<a href="https://www.luogu.com.cn/blog/heidoudou/solution-p1094">这个</a></p><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>能力有限，如有疏漏，请谅解并补充，谢谢。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快要 CSP-S2 了，复习一下一些算法（弄文化课弄了好久了，很多东西都要忘了。。。&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="贪心" scheme="https://blog.aeilot.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>题解 导弹拦截</title>
    <link href="https://blog.aeilot.top/2021/10/01/Luogu-P1020/"/>
    <id>https://blog.aeilot.top/2021/10/01/Luogu-P1020/</id>
    <published>2021-10-01T04:45:09.000Z</published>
    <updated>2021-10-01T09:28:48.620Z</updated>
    
    <content type="html"><![CDATA[<p>快要 CSP-S2 了，复习一下一些算法（弄文化课弄了好久了，很多东西都要忘了。。。</p><a id="more"></a><h2 id="读题"><a class="markdownIt-Anchor" href="#读题"></a> 读题</h2><p><a href="https://www.luogu.com.cn/problem/P1020">题目链接: Luogu P1020</a></p><p>数据是这样的：<code>389 207 155 300 299 170 158 65</code></p><p>推一推，我们发现，<code>389 300 299 170 158 65</code>是第一问的答案；在 <code>155-&gt;300</code>的时候，要使用另外一颗炮弹了，故最少应该配备两套。</p><p>在草稿纸上面推一推，不难发现，这道题的两小问，就是让你求一个<code>不上升序列长度</code>和一个<code>上升序列长度</code>。</p><h2 id="预备知识"><a class="markdownIt-Anchor" href="#预备知识"></a> 预备知识</h2><p>在求这两个东西之前，需要先学习<code>STL</code>中的两个函数：<code>lower_bound</code> <code>upper_bound</code>。</p><p>其中， <code>lower_bound</code> 是求序列中第一个<strong>大于等于</strong>某个数的数；<code>upper_bound</code> 是求序列中第一个<strong>大于</strong>某个数的数。这两个函数返回的是<strong>指针</strong>。</p><p>它们使用的前提是 序列是<strong>有序</strong>的。</p><p>以lower_bound为例，具体用法类似：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">lower_bound</span>(a, a+len, x); <span class="comment">// 前两个参数传入的都是指针</span></span><br></pre></td></tr></table></figure><p>这一函数默认是求升序序列中符合条件的数，如果要改为降序序列，则需要一个 <code>cmp</code> 函数，这一点类似于 <code>sort</code>。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">lower_bound</span>(a, a+len, x, std::greater&lt;<span class="keyword">int</span>&gt;()); <span class="comment">// 前两个参数传入的都是指针</span></span><br></pre></td></tr></table></figure><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题</h2><p>我的 <a href="https://github.com/aeilot/ProblemSet/blob/master/LuoGu/P1020/main.cpp">AC 代码</a>。</p><p>本题有两种算法，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。这里只讲后者。</p><h3 id="不上升序列"><a class="markdownIt-Anchor" href="#不上升序列"></a> 不上升序列</h3><p>我们用数组<code>d1</code>当作栈来存储它。</p><p>遍历导弹高度，把栈顶元素和高度比较：</p><ol><li>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&lt;</mo><mo>=</mo><msub><mi>d</mi><mi>l</mi></msub><mi>e</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">a_i &lt;= d_len</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span></span></span></span>，此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是符合要求的，直接入栈。</li><li>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><msub><mi>d</mi><mi>l</mi></msub><mi>e</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">a_i &gt; d_len</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span></span></span></span>，此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>把栈内第一个小于它的覆盖掉。这里说一下，能够覆盖它是因为我们不需要再访问它的值了。在测试数据中，此后几次都会进行这一操作，如果仅仅取这几个数据，最长不上升子序列长度仍然正确； 取所有数据，几次操作之后，就会执行操作1，结果仍然正确。</li></ol><h3 id="上升序列"><a class="markdownIt-Anchor" href="#上升序列"></a> 上升序列</h3><p>和不上升序列一样，只不过把 <code>upper_bound</code> 改为了 <code>lower_bound</code>，因为会出现两个相同高度的导弹的情况，这两个导弹仅仅需要同一的炮弹去拦截。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ARR[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d1[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> c1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d2[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> c2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ARR[n]) n++;</span><br><span class="line">    d1[<span class="number">0</span>] = ARR[<span class="number">0</span>];</span><br><span class="line">    d2[<span class="number">0</span>] = ARR[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ARR[i] &lt;= d1[c1])</span><br><span class="line">            d1[++c1] = ARR[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="built_in">upper_bound</span>(d1, d1 + c1, ARR[i], greater&lt;<span class="keyword">int</span>&gt;()) - d1;</span><br><span class="line">            d1[j] = ARR[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ARR[i] &gt; d2[c2])</span><br><span class="line">            d2[++c2] = ARR[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="built_in">lower_bound</span>(d2, d2 + c2, ARR[i]) - d2;</span><br><span class="line">            d2[j] = ARR[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; c1 + <span class="number">1</span> &lt;&lt; endl &lt;&lt; c2 + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>能力有限，如有疏漏，请谅解并补充，谢谢。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快要 CSP-S2 了，复习一下一些算法（弄文化课弄了好久了，很多东西都要忘了。。。&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="动态规划" scheme="https://blog.aeilot.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>如何高效使用搜索引擎</title>
    <link href="https://blog.aeilot.top/2021/08/27/search-engine/"/>
    <id>https://blog.aeilot.top/2021/08/27/search-engine/</id>
    <published>2021-08-27T09:45:09.000Z</published>
    <updated>2021-08-29T10:46:41.980Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章已经在 <a href="https://github.com/aeilot/HowToUseSearchEngines">GitHub</a> 开源了。</p><a id="more"></a><p>最近遇到一些人不太会用搜索引擎，就写了这篇文章。。。有不对的地方，或者要补充的地方希望大家踊跃评论、PR。</p><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E8%AE%A4%E8%AF%86%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">认识搜索引擎</a><ul><li><a href="#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E4%BB%A3%E8%A1%A8">搜索引擎的代表</a></li></ul></li><li><a href="#%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E6%A3%80%E7%B4%A2">如何高效检索</a><ul><li><a href="#%E8%A8%80%E7%AE%80">言简</a></li><li><a href="#%E6%84%8F%E9%AA%87">意骇</a></li></ul></li><li><a href="#%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7">高级技巧</a><ul><li><a href="#%E4%B8%80%E4%B8%BE%E5%A4%9A%E5%BE%97">一举多得</a></li><li><a href="#%E8%AE%A9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%BA%E4%BD%A0%E5%81%9A%E5%87%8F%E6%B3%95">让搜索引擎为你做减法</a></li><li><a href="#%E6%88%91%E5%8F%AA%E6%83%B3%E7%9C%8B%E8%BF%99%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E6%80%8E%E4%B9%88%E5%8A%9E">我只想看这一个网站怎么办</a></li><li><a href="#%E9%99%90%E5%AE%9A%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F">限定文件格式</a></li><li><a href="#%E9%99%90%E5%AE%9A%E7%BD%91%E5%9D%80">限定网址</a></li><li><a href="#%E9%99%90%E5%AE%9A%E6%A0%87%E9%A2%98">限定标题</a></li><li><a href="#%E5%91%8A%E8%AF%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%90%9C%E7%B4%A2%E7%9A%84%E6%98%AF%E4%BD%9C%E5%93%81">告诉搜索引擎搜索的是作品</a></li><li><a href="#%E5%91%8A%E8%AF%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%8D%E8%A6%81%E6%8B%86%E5%BC%80%E5%85%B3%E9%94%AE%E8%AF%8D">告诉搜索引擎不要拆开关键词</a></li></ul></li><li><a href="#%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB">推荐阅读</a></li><li><a href="#%E7%89%B9%E5%88%AB%E9%B8%A3%E8%B0%A2">特别鸣谢</a></li><li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li></ul><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>最近我经常遇到一些同学，经常跑来问我一些很明显在搜索引擎上面就可以搜到的问题。我问他们为什么不去网上搜，却发现其实他们搜过，只是效果不好：有些人直接把一整个问句打上去了，还有人漏关键字。这些都是他们没有掌握搜索引擎使用的精髓。所以，我写了这个教程，帮助解决搜索引擎的使用问题。</p><h2 id="认识搜索引擎"><a class="markdownIt-Anchor" href="#认识搜索引擎"></a> 认识搜索引擎</h2><p>我这里说的搜索引擎是指网络搜索引擎。下面给出<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">维基百科</a>中的定义：</p><blockquote><p>网络搜索引擎（英语：web search engine）是设计在万维网上进行搜索，意思是指自动从万维网搜集特定的信息，提供给用户进行查询的系统。</p></blockquote><p>搜索引擎的工作原理大致可以分为搜集信息、整理信息和接受查询。<strong>为了使文章简单，更深入的知识我在这里就不展开了，本文以如何使用为主。</strong></p><h3 id="搜索引擎的代表"><a class="markdownIt-Anchor" href="#搜索引擎的代表"></a> 搜索引擎的代表</h3><ul><li><a href="https://www.baidu.com">百度</a></li><li><a href="https://www.bing.com">必应</a></li><li><a href="https://www.sogou.com">搜狗</a></li><li><a href="https://www.so.com">360搜索</a></li><li><a href="https://www.google.com">谷歌</a></li><li><a href="https://yandex.com">Yandex</a></li></ul><p>还有学术型搜索引擎：</p><ul><li><a href="https://xueshu.baidu.com">百度学术</a></li><li><a href="https://scholar.google.com">谷歌学术</a></li></ul><h2 id="如何高效检索"><a class="markdownIt-Anchor" href="#如何高效检索"></a> 如何高效检索</h2><p>我认为，高效检索只需要注意：言简、意骇</p><h3 id="言简"><a class="markdownIt-Anchor" href="#言简"></a> 言简</h3><p>言简，顾名思义，就是让你的搜索尽可能更简单。在搜索的时候，应该对问题提取关键词。比如，我想要知道<code>高锰酸钾制取氧气的文字表达式是什么</code>时，我仅仅需要写<code>高锰酸钾制取氧气 文字表达式</code> 即可；同样的，在查询<code>怎么写检讨书时</code>，甚至只需搜索<code>检讨书</code>；在想知道<code>《将进酒》是谁写的</code>，只用查询<code>将进酒 作者</code>。如果不确定要搜索的内容名称，应该做更少的准确限定，换为更零散的关键词。如果是英文，则应去除复数和第三人称复数。虽然某些搜索引擎在进行查询的时候会自动去除掉 「xxx的xxx」这种词汇和标点符号，但在搜索时还是应该尽量减少他们的使用。也尽可能不要出现 「如何」「怎样」这些疑问词，更不需要和搜索引擎讲礼貌——不要出现类似「请问寒假什么时候放假？」而是写成「寒假放假时间」。</p><h3 id="意骇"><a class="markdownIt-Anchor" href="#意骇"></a> 意骇</h3><p>意骇，就是把你的搜索描述的尽可能完备。不要一昧地追求简单，在有些情况下还是需要给出限定的：比如，在搜索<code>苹果</code>时，如果你指的是水果的苹果，那为了提升效率，最好写<code>苹果 水果</code>；同理，想要搜索苹果公司，则应该写<code>苹果 公司</code>，这可以简化为<code>苹果公司</code>。如果不进行限定，有可能搜索结果第一页都会被此关键词的其他意思所充满，在搜寻时，就会降低效率。</p><p>更加高级的限定方法，请见<a href="#%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7">高级技巧</a>。</p><h2 id="高级技巧"><a class="markdownIt-Anchor" href="#高级技巧"></a> 高级技巧</h2><h3 id="一举多得"><a class="markdownIt-Anchor" href="#一举多得"></a> 一举多得</h3><p>如果我在搜索的时候，想同时获得多个关键词的结果，我可以使用 <code>|</code>，即“或”。<strong>注意：用<code>|</code>分隔关键词的时候，一定要加上空格，<code>|</code>必须要是半角的</strong>，举个例子：<code>东京 | 塔</code>。</p><h3 id="让搜索引擎为你做减法"><a class="markdownIt-Anchor" href="#让搜索引擎为你做减法"></a> 让搜索引擎为你做减法</h3><p>如果我在搜索的时候，不想获得某个关键词的结果，我可以使用 <code>-</code>，即“减”。<strong>注意：用<code>-</code>，一定要在之前加上空格</strong>，举个例子：<code>苹果 -水果</code>。</p><h3 id="我只想看这一个网站怎么办"><a class="markdownIt-Anchor" href="#我只想看这一个网站怎么办"></a> 我只想看这一个网站怎么办</h3><p>如果我只想获得某个网站的结果，可以在<strong>整个搜索之前或之后</strong>加上 <code>site:xxx网站</code>，比如：<code>site:blog.aeilot.top 数码</code>。</p><h3 id="限定文件格式"><a class="markdownIt-Anchor" href="#限定文件格式"></a> 限定文件格式</h3><p>如果我只想搜索一种格式的文件，可以在<strong>整个搜索之前或之后</strong>加上 <code>filetype:xxx网站</code>，比如：<code>filetype:pdf 物理课本</code>。不指定文件类型搜索文件时，可以使用<code>filetype:all</code>。</p><h3 id="限定网址"><a class="markdownIt-Anchor" href="#限定网址"></a> 限定网址</h3><p>如果我想让我的搜索结果的网址都包含某一字断，可以加上 <code>inurl:xxx</code>，比如：<code>inurl:pan PPT模版</code>，就可以找到网址带<code>pan</code>的所有相关结果。</p><h3 id="限定标题"><a class="markdownIt-Anchor" href="#限定标题"></a> 限定标题</h3><p>如果我想让我的搜索结果的标题都包含某一字断，可以加上 <code>intitle:xxx</code>，比如：<code>intitle:免费 PPT模版</code>，就可以找到标题带<code>免费</code>的所有相关结果。</p><h3 id="告诉搜索引擎搜索的是作品"><a class="markdownIt-Anchor" href="#告诉搜索引擎搜索的是作品"></a> 告诉搜索引擎搜索的是作品</h3><p>如果我搜索的是作品，如文学作品、艺术作品，可以加上书名号，比如：<code>《星际穿越》</code>。</p><h3 id="告诉搜索引擎不要拆开关键词"><a class="markdownIt-Anchor" href="#告诉搜索引擎不要拆开关键词"></a> 告诉搜索引擎不要拆开关键词</h3><p>如果我不想要拆开搜索的关键词，可以加上引号，比如：<code>“九年级化学“</code></p><h2 id="推荐阅读"><a class="markdownIt-Anchor" href="#推荐阅读"></a> 推荐阅读</h2><ol><li><a href="https://www.zhihu.com/question/28013848">知乎 - 如何高效地使用搜索引擎</a></li></ol><h2 id="特别鸣谢"><a class="markdownIt-Anchor" href="#特别鸣谢"></a> 特别鸣谢</h2><ul><li><a href="https://github.com/MrWillCom">MrWillCom</a> 他对我的创作进行了指导。</li><li><a href="https://github.com/QD-lazy-tm">Cathy Aeilot</a> 她启发了我写这份教程。</li></ul><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">网络搜索引擎 – 维基百科</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章已经在 &lt;a href=&quot;https://github.com/aeilot/HowToUseSearchEngines&quot;&gt;GitHub&lt;/a&gt; 开源了。&lt;/p&gt;</summary>
    
    
    
    <category term="生产力" scheme="https://blog.aeilot.top/categories/%E7%94%9F%E4%BA%A7%E5%8A%9B/"/>
    
    
    <category term="搜索引擎" scheme="https://blog.aeilot.top/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="效率" scheme="https://blog.aeilot.top/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>用 GitHub Actions 格式化 C/C++ 代码</title>
    <link href="https://blog.aeilot.top/2021/08/20/gh-action-clang-format/"/>
    <id>https://blog.aeilot.top/2021/08/20/gh-action-clang-format/</id>
    <published>2021-08-19T22:45:09.000Z</published>
    <updated>2021-08-20T08:52:17.340Z</updated>
    
    <content type="html"><![CDATA[<p>我的 <a href="https://github.com/aeilot/ProblemSet/blob/master/.github/workflows/clang-format.yml">ProblemSet</a> 项目，每次都 Format 太麻烦了，需要一个自动化 Format 的功能。利用 GitHub Actions，即可实现。</p><a id="more"></a><h2 id="github-actions"><a class="markdownIt-Anchor" href="#github-actions"></a> GitHub Actions</h2><p><a href="https://docs.github.com/en/actions">GitHub Actions</a> 是 GitHub 推出的持续集成服务，最近不要钱了，用(白嫖)的人就多起来了。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><p>直接上代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;Check Clang Format&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">format:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;Run Clang Format&quot;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;Install clang-format&quot;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo apt-get update</span></span><br><span class="line"><span class="string">          sudo apt-get install clang-format-10</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;Format Codes&quot;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">clang-format-10</span> <span class="string">-style=file</span> <span class="string">-i</span> <span class="string">*/*/*.cpp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-go/push@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">author-name:</span> <span class="string">Clang</span> <span class="string">Format</span> <span class="string">Bot</span></span><br><span class="line">          <span class="attr">commit-message:</span> <span class="string">Run</span> <span class="string">clang-format</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>如果大家有什么改进的好方法，可以在下方评论！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的 &lt;a href=&quot;https://github.com/aeilot/ProblemSet/blob/master/.github/workflows/clang-format.yml&quot;&gt;ProblemSet&lt;/a&gt; 项目，每次都 Format 太麻烦了，需要一个自动化 Format 的功能。利用 GitHub Actions，即可实现。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://blog.aeilot.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="GitHub" scheme="https://blog.aeilot.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>四季的天空</title>
    <link href="https://blog.aeilot.top/2021/07/19/pylon-in-seasons/"/>
    <id>https://blog.aeilot.top/2021/07/19/pylon-in-seasons/</id>
    <published>2021-07-19T03:45:09.000Z</published>
    <updated>2021-07-19T09:52:11.580Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用单反拍摄，Louis Aeilot 版权所有，所有图片都未经过后期处理，仅经过压缩。</p></blockquote><p>拍摄用时1年，就是每次看到了都会去拍一张。</p><a id="more"></a><p><img data-src="https://i.loli.net/2021/07/19/x7TQcN3EK85vgAP.jpg" alt="IMAGE 2020" /><br /><img data-src="https://i.loli.net/2021/07/19/UbSXKw9LquYGFCZ.jpg" alt="IMAGE 2020" /><br /><img data-src="https://i.loli.net/2021/07/19/uDqfpNb1KULycQE.jpg" alt="IMAGE 2020" /><br /><img data-src="https://i.loli.net/2021/07/19/ZiycGIMw93nmJb6.jpg" alt="IMAGE 2020" /><br /><img data-src="https://i.loli.net/2021/07/19/CIYFgQJy1L6owKt.jpg" alt="IMAGE 2021" /></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用单反拍摄，Louis Aeilot 版权所有，所有图片都未经过后期处理，仅经过压缩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;拍摄用时1年，就是每次看到了都会去拍一张。&lt;/p&gt;</summary>
    
    
    
    <category term="摄影" scheme="https://blog.aeilot.top/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>洛谷 7 月月赛 Div.2 总结</title>
    <link href="https://blog.aeilot.top/2021/07/15/luogu-lgr087/"/>
    <id>https://blog.aeilot.top/2021/07/15/luogu-lgr087/</id>
    <published>2021-07-14T22:45:09.000Z</published>
    <updated>2021-07-19T06:39:06.090Z</updated>
    
    <content type="html"><![CDATA[<p>昨天(7/14)参加了洛谷的 7 月月赛，感觉题目挺新颖的，就是数据有点。。。</p><a id="more"></a><p>比赛链接：<a href="https://www.luogu.com.cn/contest/46177">这里</a></p><p>我的代码在 <a href="https://github.com/aeilot/ProblemSet/tree/master/Competition/LuoGu-2021July-Div2">这里</a></p><h2 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h2><p>乍一看好像没思路，但是想一想，其实很简单，就是会有几种情况：</p><ol><li><strong>0个空格</strong> 全是数字的话，需要判断一下 A. 两者完全相同 B. 非A，情况 A 是可以输出 <code>Yes</code> 的。</li><li><strong>1个空格</strong> 这一种情况，从原理上分析，“选择一个有正整数的格子和一个与之相邻的空格子，将正整数移到那个空格子中”，可以得出，其实只要顺时针转一圈，初始和最终状态顺序相同，就符合条件。所以，只需要做三次判断即可，简单粗暴（在座的各位大佬要是有高端方法可以通知一下🙇）。</li><li><strong>2、3、4个空格</strong> 这几个情况，经过分析会发现，不管如何，都是满足条件的。</li></ol><p>所以，这样分析下来，很简单就 AC 了，拿到 100 分！</p><h2 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h2><blockquote><p>这道题。。。无语了。。。测试数据通过了，结果测评数据每次都卡一个，万恶的捆绑测试。。。最后得不了 100 分了。。。</p></blockquote><p>这道题最开始想的是贪心算法，排序，但是会超时，就改了一下：开两个数组，不管顺序，只管符号，放进去。这样做基本上不超过 10ms。</p><p>原理就是，计算 <code>+正数</code> <code>+负数</code> <code>*正数</code> <code>*负数</code> 出现的个数，进行排列，最后计算结果。</p><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h2><blockquote><p>因为学业原因，离开了几个小时，回来了之后都没时间做了。。。有点思路，但没写完。。。</p></blockquote><p>其实，可以根据数第一次出现的位置判断从左、右数的位置，最后进行排列即可。</p><h2 id="d"><a class="markdownIt-Anchor" href="#d"></a> D</h2><p>看了一眼就懒得写。</p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>等题解吧！感觉题目很有意思，都是些需要仔细思考的题目。(奈何我太弱了。。。太弱小了！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天(7/14)参加了洛谷的 7 月月赛，感觉题目挺新颖的，就是数据有点。。。&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="比赛" scheme="https://blog.aeilot.top/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>题解 最近公共祖先 (LCA)</title>
    <link href="https://blog.aeilot.top/2021/04/24/Luogu-P3379/"/>
    <id>https://blog.aeilot.top/2021/04/24/Luogu-P3379/</id>
    <published>2021-04-24T09:45:09.000Z</published>
    <updated>2021-07-19T06:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没刷题了，复习一下：LCA。</p><a id="more"></a><h2 id="题目详情"><a class="markdownIt-Anchor" href="#题目详情"></a> 题目详情</h2><p>题目很简单，就是求多叉树两个点的最近公共祖先。</p><p>链接: <a href="https://www.luogu.com.cn/problem/P3379">洛谷 P3379</a></p><blockquote><p>LCA（Least Common Ancestors），即最近公共祖先，是指在有根树中，找出某两个结点u和v最近的公共祖先。 ———来自百度百科</p></blockquote><p><img data-src="https://i.loli.net/2021/04/24/3XCbi4Lrd8Sxnst.png" alt="818487-20151004150339121-181913844.png" /><br />图中，4 和 3 的 LCA 就是 1。</p><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题</h2><h3 id="最简单的方法-暴力"><a class="markdownIt-Anchor" href="#最简单的方法-暴力"></a> 最简单的方法 (暴力)</h3><blockquote><p>这种方法数据一大就会TLE。</p></blockquote><p>原理很简单，让两个数一个一个向上走，直到两个数相遇。第一次相遇就是他们的 LCA。</p><p>很简单，就不赘述了，直接上代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500000</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tree[MAX];<span class="comment">// 以邻接表形式存储</span></span><br><span class="line"><span class="keyword">int</span> dep[MAX];</span><br><span class="line"><span class="keyword">int</span> fas[MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> M1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fa != <span class="number">-1</span>) &#123;</span><br><span class="line">            dep[x] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fas[x] = fa;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fas[tree[x].<span class="built_in">at</span>(i)] == <span class="number">-2</span>) M1::<span class="built_in">dfs</span>(tree[x].<span class="built_in">at</span>(i), x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fas[a] == fas[b]) &#123;</span><br><span class="line">                <span class="keyword">return</span> fas[a];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fas[b] == a) &#123;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fas[a] == b) &#123;</span><br><span class="line">                <span class="keyword">return</span> b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> da = dep[a], db = dep[b];</span><br><span class="line">            <span class="keyword">int</span> delta = <span class="built_in">abs</span>(da - db);</span><br><span class="line">            <span class="keyword">if</span> (da &gt; db) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; delta; i++) &#123;</span><br><span class="line">                    a = fas[a];</span><br><span class="line">                    da = dep[a];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (da &lt; db) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; delta; i++) &#123;</span><br><span class="line">                    b = fas[b];</span><br><span class="line">                    db = dep[b];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a = fas[a];</span><br><span class="line">                da = dep[a];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">// namespace M1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first) &#123;</span><br><span class="line">        M1::<span class="built_in">dfs</span>(r, <span class="number">-1</span>);</span><br><span class="line">        first = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    res = M1::<span class="built_in">solve</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, s;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        dep[i] = <span class="number">0</span>;</span><br><span class="line">        fas[i] = <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        tree[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        tree[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    dep[s] = <span class="number">0</span>;</span><br><span class="line">    fas[s] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">LCA</span>(a, b, s);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这道题目的数据输入，<code>x y</code> <strong>表示x 结点和 y 结点之间有一条直接连接的边（数据保证可以构成树）。</strong> 所以需要用邻接表的形式，表示多叉树。</p><h3 id="倍增法"><a class="markdownIt-Anchor" href="#倍增法"></a> 倍增法</h3><p>这个算法是对上面暴力算法的优化。这个算法的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，已经可以满足大部分的需求。</p><p>上述算法中，一步一步跳太慢了，这里我们事先做好标记，就可以每次 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 步向上跳，一直到相遇。</p><p>代码中有较为详细的注释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500001 <span class="comment">// 本题最大数据规模</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUL_MAX 22</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tree[MAX]; <span class="comment">// 以邻接表形式存储</span></span><br><span class="line"><span class="keyword">int</span> dep[MAX]; <span class="comment">// 预处理存储节点深度</span></span><br><span class="line"><span class="keyword">int</span> fas[MAX][MUL_MAX]; <span class="comment">// 存储 x 节点上面第 2^i 次方个祖先</span></span><br><span class="line"><span class="keyword">bool</span> first = <span class="literal">true</span>; <span class="comment">// 记录预处理是否结束</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lg2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">log</span>(x) / <span class="built_in">log</span>(<span class="number">2</span>) + <span class="number">1</span>; <span class="comment">// 无理数计算记得加上 1 来避免误差</span></span><br><span class="line">&#125; <span class="comment">// 手动写了一个函数，来求 log2(x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123; <span class="comment">// x 是当前节点，fa 是它的父节点</span></span><br><span class="line">    <span class="keyword">if</span> (fa != <span class="number">-1</span>) &#123;</span><br><span class="line">        dep[x] = dep[fa] + <span class="number">1</span>; <span class="comment">// x 的深度就是它的父节点加一，这很好理解</span></span><br><span class="line">    &#125;</span><br><span class="line">    fas[x][<span class="number">0</span>] = fa; <span class="comment">// x 节点的第一个父节点是 fa</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= dep[x]; i++) &#123; <span class="comment">// 循环直至 2^i 大于当前节点深度，即完成当前节点到树根的所有可跳转到的节点的预处理工作</span></span><br><span class="line">        fas[x][i] = fas[fas[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]; </span><br><span class="line">        <span class="comment">// 这一步是算法的精髓</span></span><br><span class="line">        <span class="comment">// 得到状态转移方程，动态规划计算</span></span><br><span class="line">        <span class="comment">// 意思是x的2^i祖先等于x的2^(i-1)祖先的2^(i-1)祖先</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[x].<span class="built_in">at</span>(i) != fa) <span class="built_in">dfs</span>(tree[x].<span class="built_in">at</span>(i), x); </span><br><span class="line">        <span class="comment">// 邻接表存储当前节点所有相连的节点，只要节点不是它的父节点，即节点是它的子节点，就进行下一步递归</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 深度优先搜索来预处理一下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[b] &gt; dep[a]) <span class="built_in">swap</span>(a, b); <span class="comment">// 确保 a 的深度更深，避免冗余的判断</span></span><br><span class="line">    <span class="keyword">while</span> (dep[a] &gt; dep[b]) &#123;</span><br><span class="line">        a = fas[a][<span class="built_in">lg2</span>(dep[a] - dep[b]) - <span class="number">1</span>]; <span class="comment">// a 向上跳，跳至两节点同级</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == b) <span class="keyword">return</span> a; <span class="comment">// 若此时两节点相遇，就可以直接返回。否则两节点还需再次向上跳。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">lg2</span>(dep[a]); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fas[a][i] != fas[b][i]) &#123;</span><br><span class="line">            a = fas[a][i];</span><br><span class="line">            b = fas[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 从可跳到的最高处向下枚举，得到 LCA</span></span><br><span class="line">    <span class="keyword">return</span> fas[a][<span class="number">0</span>]; <span class="comment">// 返回答案</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first) &#123;</span><br><span class="line">        dep[r] = <span class="number">0</span>;</span><br><span class="line">        fas[r][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(r, <span class="number">-1</span>);</span><br><span class="line">        first = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    res = <span class="built_in">solve</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, s;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        dep[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MUL_MAX; j++)</span><br><span class="line">            fas[i][j] = <span class="number">-2</span>;</span><br><span class="line">    &#125; <span class="comment">// 数组初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        tree[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        tree[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        <span class="comment">// 邻接表存入数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">LCA</span>(a, b, s);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还可以预处理出一个 <code>lg</code> 数组，避免对数计算，大家可以自己去尝试，会有一定时间优化效果。</p><p>无法理解倍增？这里有个 <a href="https://blog.csdn.net/jarjingx/article/details/8180560">经典资料</a></p><h2 id="其他方法"><a class="markdownIt-Anchor" href="#其他方法"></a> 其他方法</h2><p>实际上还有更快的方法求这道题的答案。倍增算法已经可以满足需求，就不再往下写了。</p><ul><li>Tarjan</li><li>ST 算法</li></ul><p>大家有兴趣可以去尝试一下。</p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>这里放上两种列出算法的评分。</p><h3 id="暴力"><a class="markdownIt-Anchor" href="#暴力"></a> 暴力</h3><p><img data-src="https://i.loli.net/2021/04/24/UF9g4PefzQ8lrYL.png" alt="截屏2021-04-24 下午6.13.14.png" /></p><h3 id="倍增"><a class="markdownIt-Anchor" href="#倍增"></a> 倍增</h3><p><img data-src="https://i.loli.net/2021/04/24/G2qxQDSBCuNYm89.png" alt="截屏2021-04-24 下午6.13.08.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没刷题了，复习一下：LCA。&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://blog.aeilot.top/categories/OI/"/>
    
    
    <category term="洛谷" scheme="https://blog.aeilot.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="模版" scheme="https://blog.aeilot.top/tags/%E6%A8%A1%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>用简单的物理方法证明牛顿莱布尼茨公式</title>
    <link href="https://blog.aeilot.top/2020/12/25/newton-leibniz-proof/"/>
    <id>https://blog.aeilot.top/2020/12/25/newton-leibniz-proof/</id>
    <published>2020-12-24T23:45:09.000Z</published>
    <updated>2021-07-19T06:39:21.170Z</updated>
    
    <content type="html"><![CDATA[<p>前几天经过苦思冥想，想出来了一种简单的证明方法，现在来简单分享一下。</p><a id="more"></a><h2 id="关于牛顿莱布尼茨公式"><a class="markdownIt-Anchor" href="#关于牛顿莱布尼茨公式"></a> 关于牛顿莱布尼茨公式</h2><p>即微积分基本定理。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msubsup><mo fence="false">∣</mo><mi>a</mi><mi>b</mi></msubsup></mrow><annotation encoding="application/x-tex">\int_a^b f(x)dx = F(b) - F(a) = F(x)\bigg|_a^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5109580000000005em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.7186980000000003em;vertical-align:-0.9997199999999998em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord"><span class="mord"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4799700000000002em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25698em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87897em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7189780000000003em;"><span style="top:-1.7002800000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span><span style="top:-3.9328700000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9997199999999998em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 原函数。</p><h2 id="构思"><a class="markdownIt-Anchor" href="#构思"></a> 构思</h2><p>有初中物理知识可以知道，在 v-t 图像中，面积就是位移，两点间面积之差就是时间差的积分。</p><p>所以很容易证明出这一定理。</p><h2 id="证明"><a class="markdownIt-Anchor" href="#证明"></a> 证明</h2><p>所以 v-t 函数的原函数就是 s(t) 函数，所以 [a,b] 区间内的位移就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msubsup><mo fence="false">∣</mo><mi>a</mi><mi>b</mi></msubsup></mrow><annotation encoding="application/x-tex">s(t)\bigg|_a^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.7186980000000003em;vertical-align:-0.9997199999999998em;"></span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4799700000000002em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25698em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87897em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7189780000000003em;"><span style="top:-1.7002800000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span><span style="top:-3.9328700000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9997199999999998em;"><span></span></span></span></span></span></span></span></span></span></p><p>而上文已经得出 v(t) 函数在 [a,b] 区间的积分也指的是位移。</p><p>所以很容易得出要证明的结论。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>本人仅是业余爱好进行学习，若有不足，请指正。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天经过苦思冥想，想出来了一种简单的证明方法，现在来简单分享一下。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学与数学" scheme="https://blog.aeilot.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="高等数学" scheme="https://blog.aeilot.top/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    <category term="微积分" scheme="https://blog.aeilot.top/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>简评荣耀手环6</title>
    <link href="https://blog.aeilot.top/2020/12/25/honor-band6/"/>
    <id>https://blog.aeilot.top/2020/12/25/honor-band6/</id>
    <published>2020-12-24T22:45:09.000Z</published>
    <updated>2021-07-19T06:38:11.600Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://i.loli.net/2020/12/25/bL2k4lVvfWIKxJp.png" alt="Band" /></p><p>前几天买了个 <strong>荣耀手环6</strong>，简单点评点评。</p><a id="more"></a><h2 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h2><ul><li><strong>屏幕</strong>在一般的手环里算是比较大的，比较全面屏，颜值也挺高的。</li><li><strong>续航</strong>把类似自动运动监测、心率检测、压力检测之类的打开了之后都有一个星期的续航。</li><li><strong>离线支付宝、NFC</strong>真的很方便。</li><li>etc</li></ul><h2 id="不足"><a class="markdownIt-Anchor" href="#不足"></a> 不足</h2><ul><li><strong>表盘</strong>，说实在的，真得没有小米的好看，还不支持自定义，希望以后能适配。话说。。。这设计者怕不是喝了假酒(bushi)。</li><li><strong>非华为系手机</strong>用不了一些特别功能，比如心脏健康什么的，不过可以破解，自行搜索。</li><li><strong>24小时血氧检测</strong>这个功能是不支持的。</li></ul><h2 id="期望"><a class="markdownIt-Anchor" href="#期望"></a> 期望</h2><p>第一次买华为系的产品（不过现在荣耀已经分离了），感觉还挺好。</p><p>就是希望官方能够加强自定义功能和对于非华为手机，特别是苹果手机的适配。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>这一款产品还是非常值得买的，当然，这里不建议苹果用户购买NFC版本，不然很多功能无法使用。</p><p>价格：标准版 249，NFC 289</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/12/25/bL2k4lVvfWIKxJp.png&quot; alt=&quot;Band&quot; /&gt;&lt;/p&gt;
&lt;p&gt;前几天买了个 &lt;strong&gt;荣耀手环6&lt;/strong&gt;，简单点评点评。&lt;/p&gt;</summary>
    
    
    
    <category term="数码" scheme="https://blog.aeilot.top/categories/%E6%95%B0%E7%A0%81/"/>
    
    
    <category term="测评" scheme="https://blog.aeilot.top/tags/%E6%B5%8B%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>海上生明月，天涯共此时。</title>
    <link href="https://blog.aeilot.top/2020/10/01/mid-autumn-2020/"/>
    <id>https://blog.aeilot.top/2020/10/01/mid-autumn-2020/</id>
    <published>2020-10-01T03:45:09.000Z</published>
    <updated>2021-01-24T11:14:18.110Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用单反拍摄，Louis Aeilot 版权所有。镜头不够。。。。。。</p></blockquote><p><img data-src="https://i.loli.net/2020/10/01/ouLZczWMdQA3Crw.png" alt="Photo" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用单反拍摄，Louis Aeilot 版权所有。镜头不够。。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&quot;https://i.loli.net/2020/10/01/ouLZczWMdQA3Crw.png&quot; a</summary>
      
    
    
    
    <category term="摄影" scheme="https://blog.aeilot.top/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>我为什么重新拿出了 iPod</title>
    <link href="https://blog.aeilot.top/2020/09/11/ipod-shuffle/"/>
    <id>https://blog.aeilot.top/2020/09/11/ipod-shuffle/</id>
    <published>2020-09-11T01:45:09.000Z</published>
    <updated>2021-07-19T06:39:00.070Z</updated>
    
    <content type="html"><![CDATA[<p>我有一个 iPod Shuffle，已经吃灰多年了。。。最近重新拿出来用了。</p><a id="more"></a><h2 id="事情的起因"><a class="markdownIt-Anchor" href="#事情的起因"></a> 事情的起因</h2><p>我订阅了 Apple Music，挺不错的，只是在 Phone，Mac 这些设备上，不管多么优美悦耳的音乐都成了使用设备的背景音乐。。。无法让人专心听完一首歌曲。我们似乎已经忘记之前没有这些东西时，沉静在一首歌曲中的感受了。</p><p>我拿出了这款 iPod Shuffle，有点掉色，却不影响使用。感谢，它让我找回了之前发现一首好歌、听完一首好歌的激动、欣喜与感动！闭上眼睛，静下心来，享受着属于你自己的余音绕梁的乐曲。</p><h2 id="音乐来源"><a class="markdownIt-Anchor" href="#音乐来源"></a> 音乐来源</h2><p>有人要问了，你的乐曲从哪里来的？众所周知，现在所有的平台都有 DRM…</p><p>我购买了网易云音乐包，8元一个月，然后使用这个 <a href="http://ncm.worthsee.com">Doge</a>。</p><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>实际上 iPod 还有一个好处，就是小巧 <s>方便带到学校去，好藏</s>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我有一个 iPod Shuffle，已经吃灰多年了。。。最近重新拿出来用了。&lt;/p&gt;</summary>
    
    
    
    <category term="数码" scheme="https://blog.aeilot.top/categories/%E6%95%B0%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift 中的 SharedPreferance —— UserDefaults</title>
    <link href="https://blog.aeilot.top/2020/08/24/swift-userdefaults/"/>
    <id>https://blog.aeilot.top/2020/08/24/swift-userdefaults/</id>
    <published>2020-08-23T22:45:09.000Z</published>
    <updated>2021-01-25T05:51:23.010Z</updated>
    
    <content type="html"><![CDATA[<p>从 Android 开发又最终回到 iOS 了，好多东西都不知道。最近一直有需求要用一个类似 Android 的 SharedPreferance 的东西。找了一下资料，来总结一下。</p><a id="more"></a><h2 id="它是什么"><a class="markdownIt-Anchor" href="#它是什么"></a> 它是什么</h2><blockquote><p>不会吧？不会还有人不知道 SharedPreferance 吧？？？</p></blockquote><p><code>SharedPreferance</code> 是一种轻量级的 Android 储存API, 用于储存<strong>简单</strong>的数据，数据多了就不如其他方式高效了。</p><p>iOS 中，起同样作用的东西，叫 <code>UserDefaults</code>。</p><p>这两者都以 <code>key-value</code> 的形式存储。</p><h2 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h2><p><strong>简单数据</strong></p><p><strong>简单数据</strong></p><p><strong>简单数据</strong></p><p>复杂数据建议使用 <code>SQLite</code> 或者 <code>Core Data</code>，不建议作死。。。</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><p>直接上代码，里面注释我都写好了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults <span class="operator">=</span> <span class="type">UserDefaults</span>.standard <span class="comment">// 获取全局的 UserDefaults</span></span><br><span class="line"></span><br><span class="line">defaults.set(<span class="type">Int</span>.max, forKey: <span class="string">&quot;int&quot;</span>) <span class="comment">// 存储</span></span><br><span class="line">defaults.integer(forKey: <span class="string">&quot;int&quot;</span>) <span class="comment">// 读取</span></span><br><span class="line"></span><br><span class="line">defaults.set(<span class="literal">true</span>, forKey: <span class="string">&quot;bool&quot;</span>)</span><br><span class="line">defaults.bool(forKey: <span class="string">&quot;bool&quot;</span>)</span><br><span class="line"></span><br><span class="line">defaults.set(<span class="type">Double</span>.infinity, forKey: <span class="string">&quot;double&quot;</span>)</span><br><span class="line">defaults.double(forKey: <span class="string">&quot;double&quot;</span>)</span><br><span class="line"></span><br><span class="line">defaults.set(<span class="type">Float</span>.infinity, forKey: <span class="string">&quot;float&quot;</span>)</span><br><span class="line">defaults.float(forKey: <span class="string">&quot;float&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="默认值"><a class="markdownIt-Anchor" href="#默认值"></a> 默认值</h2><p><code>Float</code>, <code>Int</code>, <code>Double</code> 的默认值都是 0；<code>Bool</code> 的默认值是 false。</p><h2 id="更多"><a class="markdownIt-Anchor" href="#更多"></a> 更多</h2><p>大家可以多在 Playgrounds 里面试试，还可以看看 <a href="https://developer.apple.com/documentation/foundation/userdefaults">Apple Developer Documentation</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从 Android 开发又最终回到 iOS 了，好多东西都不知道。最近一直有需求要用一个类似 Android 的 SharedPreferance 的东西。找了一下资料，来总结一下。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://blog.aeilot.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Swift" scheme="https://blog.aeilot.top/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>凝视那一轮明月</title>
    <link href="https://blog.aeilot.top/2020/08/23/stare-at-moon/"/>
    <id>https://blog.aeilot.top/2020/08/23/stare-at-moon/</id>
    <published>2020-08-22T22:45:09.000Z</published>
    <updated>2021-07-19T06:39:33.110Z</updated>
    
    <content type="html"><![CDATA[<p>随便乱写的，，，要拿去参加一个小比赛。。。</p><a id="more"></a><hr /><p>初夏，深夜，我却还在熬夜赶作业。</p><p>夜里，恍惚着，偶然向窗外望了望。多完美的一轮明月啊！</p><p>凝视这一轮明月，它明亮，照白了月边稀疏的云；它洁净，仿佛世间没有什么比它跟洁白如雪；它深邃，好像有不尽的秘密。周围繁星点点，如同月亮的伙伴，与她共欢笑。明朗的夜空，月亮和繁星点缀，让这个夜晚，显得十分安静祥和。</p><p>我不禁陷入无尽的想象。月儿啊！这孤独的夜，你有着星星的陪伴，与我不同！月儿啊！夜深人静时，你怎么还没入睡？是否和我一样，还在努力奋斗？月儿啊！一个个夜晚，你是否感觉有点烦闷？……</p><p>想着想着，我突然想到：身处闹市区，是如何见到这样的明月的？这夜空明朗的，让人惊奇，我从未见过。这夜空，不应该满是雾霾、尘埃吗？</p><p>我回想起，好多年前，那也是一个这样的的夜晚，我和朋友们在路口乘凉，可能才刚上小学。</p><p>抬眼望去，一片灰蒙蒙的天，几乎看不清什么月亮，更别提星星了。那时候，上海的明朗的夜晚并不是天天有。</p><p>“这月儿，今天晚上又躲起来了，看不清了。”一旁的嘉豪一边向天上凝视，一边说。但是，最终他还是未能知晓月儿的真面目。</p><p>“环境污染太严重了，那些工厂、车辆，人类生活影响到了环境。”我说着，仿佛看到了远处郊区的几座大工厂，烟还在不断上升到大气中。</p><p>嘉豪打了个哈欠。现在已经是夜深人静时，远处的卡车的声音，很清楚，又很微弱。老师讲过，有些卡车用的油不符合标准，排放出来很是污染环境。我们站在这路口，似乎还能闻到汽油发出的一种难闻的味道。</p><p>这路口，昏黄的路灯还在亮着，高楼大厦还在发着光。“书上说，大部分的电力还是来自不清洁能源。”喜爱读书的嘉豪说。一个晚上，这灯火通明的闹市区，不知要浪费多少电呢。</p><p>夜深了，我记不起后面说了什么，想了什么。</p><p>恍惚间，我又陷入了沉思。啊，我的月儿！你看起来有些孤独！没有星星的陪伴，你还好吗！啊，我的月儿！你听见这卡车的声音，问道汽油的味道了吗？啊，我的月儿！这样一个夜晚，你却躲了起来，是有什么秘密吗？<br />……<br />夜晚，有些凉，我被冻醒，已经凌晨二三点了吧。</p><p>我再次举头凝视天边的月亮。诶？月亮怎么又躲起来了？我望向桌上杂乱摆放的作业。诶？我的作业怎么已经写完了！原来，一切，是梦。作业写完后，我太累了，就在书桌上睡着了。</p><p>我的月亮，答应我，以后不要再躲起来了？我都能见到你和星星，在无数个静寂而孤独的夜！答应我，让我梦想成真，好吗？</p><p>将来，我再次凝视那一轮明月……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随便乱写的，，，要拿去参加一个小比赛。。。&lt;/p&gt;</summary>
    
    
    
    <category term="文学" scheme="https://blog.aeilot.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="散文" scheme="https://blog.aeilot.top/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>用 GitHub Actions 部署 Hexo 博客</title>
    <link href="https://blog.aeilot.top/2020/08/22/gh-action-hexo/"/>
    <id>https://blog.aeilot.top/2020/08/22/gh-action-hexo/</id>
    <published>2020-08-21T22:45:09.000Z</published>
    <updated>2021-01-24T11:14:23.910Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个朋友找我，说她弄了一个 Hexo 博客，想做 GitHub Actions 自动部署，奈何不会弄，只好让我帮忙。</p><a id="more"></a><h2 id="github-actions"><a class="markdownIt-Anchor" href="#github-actions"></a> GitHub Actions</h2><p><a href="https://docs.github.com/en/actions">GitHub Actions</a> 是 GitHub 推出的持续集成服务，最近不要钱了，用(白嫖)的人就多起来了。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><p>话不多说，直接上代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&quot;Hexo Blog Builder&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;Hexo Blog Build&quot;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span> <span class="string">Previous</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">docs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Clean</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">New</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Move</span> <span class="string">docs/</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mv</span> <span class="string">public</span> <span class="string">docs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Publish</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$&#123;&#123; secrets.KEY &#125;&#125;&quot; &gt; ~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;Hexo Deploy Bot&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;nobody@nobody.nobody&quot;</span></span><br><span class="line"><span class="string">          git config --global core.quotepath false</span></span><br><span class="line"><span class="string">          git add --all</span></span><br><span class="line"><span class="string">          git commit -m &quot;Hexo Blog Build&quot;</span></span><br><span class="line"><span class="string">          git push origin master</span></span><br></pre></td></tr></table></figure><p>本 Action 需要你的 ssh 公钥，也就是 <code>id_rsa.pub</code> 存在项目设置中的 Secrets 内。</p><h2 id="tldr"><a class="markdownIt-Anchor" href="#tldr"></a> TL;DR</h2><p>具体实现很简单，用 Hexo 自带生成器生成到 <code>public</code> 目录，把 <code>public</code> 目录改名为 <code>docs</code>。最后 <code>push</code> 到项目里。</p><p><code>push</code> 使用 SSH Key，实现免密码。</p><p>在 GitHub Pages 设置中，需要把 Source 改为 docs 目录。</p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>如果大家有什么改进的好方法，可以在下方评论！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近有一个朋友找我，说她弄了一个 Hexo 博客，想做 GitHub Actions 自动部署，奈何不会弄，只好让我帮忙。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://blog.aeilot.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="GitHub" scheme="https://blog.aeilot.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>迟来的日志 - WWDC 2020 奖学金</title>
    <link href="https://blog.aeilot.top/2020/08/19/wwdc2020/"/>
    <id>https://blog.aeilot.top/2020/08/19/wwdc2020/</id>
    <published>2020-08-19T04:45:09.000Z</published>
    <updated>2021-07-19T06:39:49.420Z</updated>
    
    <content type="html"><![CDATA[<p>今年 6 月份，因为疫情的影响，WWDC改为线上，之前的奖学金重命名为 <a href="https://developer.apple.com/wwdc20/swift-student-challenge/">Swift Student Challenge</a>。</p><p>我老早就有参加这一活动的打算，只是一直没能实现，也没有达到要求。今年大胆尝试了一会，虽然成绩不理想，但还是收获了许多。</p><p>我今年的项目在 <a href="https://github.com/aeilot/WWDC2020">aeilot/WWDC2020</a>。</p><a id="more"></a><h2 id="overview"><a class="markdownIt-Anchor" href="#overview"></a> Overview</h2><p>今年我的项目使用了 SwiftUI 和 SpriteKit。我做了一个 2D 的跑酷类游戏，内容是关于 COVID19 的。</p><p>整体开发下来，多亏了 Apple Document，里面的文档很详细，还有示例，👍。</p><p><img data-src="https://i.loli.net/2020/08/20/BXzAlu5jIvNg76O.png" alt="Apple Document" /></p><p>当然开发中遇到的几个问题，我也是在 Apple Developer Forums 和 Stack Overflow 解决的。具体链接就不写了，社区很活跃，10分钟就有人回答了。</p><p>只是开发太赶，只有不到一个星期，决定参加都花了几天，🤦‍♀️。。。所以最后成果像一个半成品。。。</p><h2 id="future"><a class="markdownIt-Anchor" href="#future"></a> Future</h2><p>关于明年的 WWDC，我想我是一定会去参加的！最好早点准备，加油！等着我的好消息！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年 6 月份，因为疫情的影响，WWDC改为线上，之前的奖学金重命名为 &lt;a href=&quot;https://developer.apple.com/wwdc20/swift-student-challenge/&quot;&gt;Swift Student Challenge&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我老早就有参加这一活动的打算，只是一直没能实现，也没有达到要求。今年大胆尝试了一会，虽然成绩不理想，但还是收获了许多。&lt;/p&gt;
&lt;p&gt;我今年的项目在 &lt;a href=&quot;https://github.com/aeilot/WWDC2020&quot;&gt;aeilot/WWDC2020&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://blog.aeilot.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Swift" scheme="https://blog.aeilot.top/tags/Swift/"/>
    
    <category term="WWDC" scheme="https://blog.aeilot.top/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>vcpkg - 方便的 C/C++ 库管理器</title>
    <link href="https://blog.aeilot.top/2020/08/13/vcpkg/"/>
    <id>https://blog.aeilot.top/2020/08/13/vcpkg/</id>
    <published>2020-08-13T04:45:09.000Z</published>
    <updated>2021-01-24T11:14:11.190Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个大型的 C++ 项目 ── <a href="https://github.com/louis-studio/Albumist">Albumist</a>。它使用 Qt，需要用到很多类似 <code>sqlite3</code>、<code>exiv2</code>、<code>libcurl</code> 之类的库。第三方库管理似乎成了问题。</p><p>支持 git 的都可以使用　<code>git submodule</code> 来管理，但是还有少部分是不支持的，或者是二进制的，比如 <code>sqlite3</code>。这就要我们手动去下载，手动去更新，好生麻烦。</p><a id="more"></a><h2 id="vcpkg"><a class="markdownIt-Anchor" href="#vcpkg"></a> vcpkg</h2><p>我一直想要一个类似 <code>npm</code> <code>pip</code> 一样的东西，把依赖写在文件里面，然后直接 <code>install</code> 即可。</p><p>经过搜索，我发现了微软的一个项目 <a href="https://github.com/microsoft/vcpkg/">vcpkg</a>。官方定义它为 “C++ Library Manager for Windows, Linux, and MacOS”，简单翻译一下就是 “支持 Windows, Linux 和 macOS 的 C++ 库管理器”。</p><p>在 Arch Linux 上面，安装它并不复杂，只需要：<code>sudo pacman -S vcpkg-git</code> 即可。其他系统没有尝试过，跟着它的 README 也很方便安装。</p><h2 id="清单-功能"><a class="markdownIt-Anchor" href="#清单-功能"></a> “清单” 功能</h2><p>在项目根目录创建一个 <code>vcpkg.json</code>， 然后 <code>vcpkg install</code>。这一功能就是“清单”功能。它正好是我想要的，可是却暂时处在 Beta 阶段，不过也无关紧要。</p><p>要启用“清单”功能，在执行命令时，需要接参数 <code>--feature-flags = manifests</code>。</p><p>清单大概长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&lt;name of your project&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version-string&quot;</span>: <span class="string">&quot;&lt;version of your project&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;abseil&quot;</span>,</span><br><span class="line">    <span class="string">&quot;boost&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很方便，也很快捷。</p><h2 id="不足"><a class="markdownIt-Anchor" href="#不足"></a> 不足</h2><p>比起这样一个纯粹的管理器，我更希望获得类似 Java 的 Gradle 的体验。如果 CMake 能加入类似功能，体验一定能够翻倍，快捷方便且无需第三方软件。</p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>— 2020 08 15 更新</p><p>又停止使用这个东西了，Windows 上面需要 MSVC。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做一个大型的 C++ 项目 ── &lt;a href=&quot;https://github.com/louis-studio/Albumist&quot;&gt;Albumist&lt;/a&gt;。它使用 Qt，需要用到很多类似 &lt;code&gt;sqlite3&lt;/code&gt;、&lt;code&gt;exiv2&lt;/code&gt;、&lt;code&gt;libcurl&lt;/code&gt; 之类的库。第三方库管理似乎成了问题。&lt;/p&gt;
&lt;p&gt;支持 git 的都可以使用　&lt;code&gt;git submodule&lt;/code&gt; 来管理，但是还有少部分是不支持的，或者是二进制的，比如 &lt;code&gt;sqlite3&lt;/code&gt;。这就要我们手动去下载，手动去更新，好生麻烦。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://blog.aeilot.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C" scheme="https://blog.aeilot.top/tags/C/"/>
    
    <category term="C++" scheme="https://blog.aeilot.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>vimrc 配置指南</title>
    <link href="https://blog.aeilot.top/2020/07/26/vimrc/"/>
    <id>https://blog.aeilot.top/2020/07/26/vimrc/</id>
    <published>2020-07-25T23:01:09.000Z</published>
    <updated>2021-07-19T06:39:44.900Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://www.vim.org/images/vim_header.gif" alt="Vim" /></p><p>Vim 即 Vi Improved，它的前身是 Vi。它是一个十分强大的编辑器，优点如下：</p><ul><li>不需要鼠标，纯键盘</li><li>Linux 系统预装</li><li>键盘命令肌肉记忆之后，效率非常高</li></ul><p>但是，它的配置许许多多，让人难以记住。我正好要在新电脑上配置它，故写此文。</p><a id="more"></a><h3 id="为什么不用别人现成的"><a class="markdownIt-Anchor" href="#为什么不用别人现成的"></a> 为什么不用别人现成的？</h3><ol><li>自己的配置更顺手，自己更熟悉。</li><li>了解 Vim Script，可以自己造插件</li><li>etc.</li></ol><h2 id="不会-vim-怎么办"><a class="markdownIt-Anchor" href="#不会-vim-怎么办"></a> 不会 Vim 怎么办</h2><p>啊这…… 🤣</p><p>你可以试着在命令行输入 <code>vimtutor</code>。</p><h2 id="vimrc-的位置"><a class="markdownIt-Anchor" href="#vimrc-的位置"></a> vimrc 的位置</h2><p>本篇文章以新安装的 vim 为例。Vim 的配置文件叫做 <code>vimrc</code>。在 Mac、Linux 等系统上，位于 <code>~/.vimrc</code>。在 Windows 系统中，它叫做 <code>_vimrc</code>，但是同样位于 Home 目录中。</p><p>全局的配置，在 Mac、Linux 等系统上，位于 <code>/etc/vimrc</code>。在 Windows 系统上，它储存在 Vim 安装目录，同样叫做 <code>vimrc</code>。</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><p>一个什么也没有配置的 Vim，打开可能是这样的:</p><p><img data-src="https://i.loli.net/2020/07/25/VSRZMUnjOfDzq8b.png" alt="image.png" /></p><p>下面各配置，你可以添加自己想要的。以下所有配置都可以在命令模式输入，临时启用或关闭。</p><h3 id="基本"><a class="markdownIt-Anchor" href="#基本"></a> 基本</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible <span class="comment">&quot; 不使用 Vi 兼容模式</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="keyword">on</span>  <span class="comment">&quot; 检测文件类型，加载插件</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span> <span class="comment">&quot; 开启语法高亮</span></span><br><span class="line"><span class="keyword">set</span> showmode <span class="comment">&quot; 显示当前模式</span></span><br><span class="line"><span class="keyword">set</span> showcmd <span class="comment">&quot; 在底部显示命令</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span> <span class="comment">&quot; 启用鼠标，不建议开启</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span>  </span><br><span class="line"><span class="keyword">set</span> t_Co=<span class="number">256</span></span><br><span class="line"><span class="keyword">filetype</span> <span class="built_in">indent</span> <span class="keyword">on</span> <span class="comment">&quot; 根据文件类型，不同缩进</span></span><br></pre></td></tr></table></figure><h3 id="缩进"><a class="markdownIt-Anchor" href="#缩进"></a> 缩进</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autoindent <span class="comment">&quot; 自动缩进</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span> <span class="comment">&quot; tab占4个空格</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span> <span class="comment">&quot; 在文本上按下&gt;&gt;（增加一级缩进）、&lt;&lt;（取消一级缩进）或者==（取消全部缩进）时，每一级的空格数。</span></span><br><span class="line"><span class="keyword">set</span> expandtab <span class="comment">&quot; tab自动转为空格</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">2</span> <span class="comment">&quot; tab转为多少空格</span></span><br></pre></td></tr></table></figure><h3 id="界面"><a class="markdownIt-Anchor" href="#界面"></a> 界面</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">number</span> <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="keyword">set</span> relativenumber <span class="comment">&quot; 显示光标所在行当前行号，其他都显示为相对于当前行的行号</span></span><br><span class="line"><span class="keyword">set</span> cursorline <span class="comment">&quot; 当前行高亮</span></span><br><span class="line"><span class="keyword">colorscheme</span> default <span class="comment">&quot; 设置颜色主题为 default，颜色主题储存在 Home 目录的 .vim/colors 文件夹，Windows 下叫做 vimfiles/colors</span></span><br><span class="line"><span class="keyword">set</span> wrap <span class="comment">&quot; 设置多于行宽的文本自动分拆为多行显示，反之: set nowrap</span></span><br><span class="line"><span class="keyword">set</span> linebreak <span class="comment">&quot; 遇到特殊的符号才折行</span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span> <span class="comment">&quot; 是否显示状态栏。0 不显示，1 只在多窗口时显示，2 显示。</span></span><br><span class="line"><span class="keyword">set</span> ruler <span class="comment">&quot; 状态栏显示光标位置</span></span><br><span class="line"><span class="keyword">set</span> showmatch <span class="comment">&quot; 高亮括号</span></span><br></pre></td></tr></table></figure><h3 id="搜索"><a class="markdownIt-Anchor" href="#搜索"></a> 搜索</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hlsearch <span class="comment">&quot; 高亮搜索结果</span></span><br><span class="line"><span class="keyword">set</span> incsearch <span class="comment">&quot; 搜索输入时，即时跳转</span></span><br><span class="line"><span class="keyword">set</span> ignorecase <span class="comment">&quot; 忽略大小写</span></span><br></pre></td></tr></table></figure><h3 id="更多"><a class="markdownIt-Anchor" href="#更多"></a> 更多</h3><p>Vim 配置不止这些，我只介绍了一些常用的。Vim Script 值得学习，学完了还可以自己开发插件。</p><h2 id="题外话-插件"><a class="markdownIt-Anchor" href="#题外话-插件"></a> 题外话 - 插件</h2><p>插件管理，Vim 虽然新增了自带的，但我还是很推荐 <a href="https://github.com/junegunn/vim-plug">Vim-Plug</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.vim.org/images/vim_header.gif&quot; alt=&quot;Vim&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Vim 即 Vi Improved，它的前身是 Vi。它是一个十分强大的编辑器，优点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要鼠标，纯键盘&lt;/li&gt;
&lt;li&gt;Linux 系统预装&lt;/li&gt;
&lt;li&gt;键盘命令肌肉记忆之后，效率非常高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，它的配置许许多多，让人难以记住。我正好要在新电脑上配置它，故写此文。&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://blog.aeilot.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Linux" scheme="https://blog.aeilot.top/tags/Linux/"/>
    
    <category term="编辑器" scheme="https://blog.aeilot.top/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    <category term="Vim" scheme="https://blog.aeilot.top/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>NextCloud - DIY NAS 解决方案</title>
    <link href="https://blog.aeilot.top/2020/07/23/nextcloud/"/>
    <id>https://blog.aeilot.top/2020/07/23/nextcloud/</id>
    <published>2020-07-23T04:45:09.000Z</published>
    <updated>2021-07-19T06:39:26.280Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://avatars0.githubusercontent.com/u/19211038?s=200&amp;v=4" alt="LOGO" /></p><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>我之前给家中的服务器做了一个 WebDAV 功能，带有不堪入目的 UI 和难以使用的功能。而且配置起来并不简单。一直想要改进，但是却一直没时间。最近有空了，便开始寻找替代品。</p><p>查了几下 GitHub，找到了一个标星 10k+ 的项目 —— <a href="https://github.com/nextcloud/">NextCloud</a>。了解了一下，NextCloud 是一个拥有 <strong>全平台客户端</strong>，支持 <strong>WebDAV</strong>，而且 <strong>插件化</strong>，可以 <strong>多用户</strong> 使用的私有云存储网盘项目。不仅如此，它还支持共享、版本控制、团队协作等功能。插件化让它拥有了类似 Markdown 在线编辑，Draw-io 在线编辑，显示 RAW 文件的功能。</p><p>而且，我发现它支持 Docker，这无疑简化了我们配置的步骤。</p><p>那么，我们开始吧！</p><a id="more"></a><h2 id="docker-配置"><a class="markdownIt-Anchor" href="#docker-配置"></a> Docker 配置</h2><p>Docker 安装很简单，为了安装快速，你可以参考清华大学开源镜像站给出的 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">文档</a>。如果你已经安装了 Docker, 那么可以忽略这一步。</p><p>更换镜像也是让你更快体验的必不可少的一步，修改 <code>/etc/docker/daemon.json</code> 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span> : [</span><br><span class="line">    <span class="string">&quot;http://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span> : [</span><br><span class="line">    <span class="string">&quot;registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装-nextcloud"><a class="markdownIt-Anchor" href="#安装-nextcloud"></a> 安装 NextCloud</h2><p>运行如下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d \</span><br><span class="line">        --name nextcloud \</span><br><span class="line">        -p 8000:80 \</span><br><span class="line">        -v &lt;数据储存位置&gt;:/var/www/html \</span><br><span class="line">        nextcloud</span><br></pre></td></tr></table></figure><p>如果遇到如下问题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure><p>可以运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><p>配置这一部分很简单，不用解释了。</p><p>选择数据库时，使用量小可以选择 SQLite，但是并不推荐。</p><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>NextCloud 还是非常稳定的，基本配置完之后不会遇到什么问题。而且原生支持中文，只需要在设置中设置一下就可以了。</p><p>我主要用它储存我的照片，摄影还有一些不需要经常查看的文件。由于自己服务器性能不错，用起来很流畅，完全没必要买现成的，硬盘不够再买一个即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/19211038?s=200&amp;amp;v=4&quot; alt=&quot;LOGO&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;我之前给家中的服务器做了一个 WebDAV 功能，带有不堪入目的 UI 和难以使用的功能。而且配置起来并不简单。一直想要改进，但是却一直没时间。最近有空了，便开始寻找替代品。&lt;/p&gt;
&lt;p&gt;查了几下 GitHub，找到了一个标星 10k+ 的项目 —— &lt;a href=&quot;https://github.com/nextcloud/&quot;&gt;NextCloud&lt;/a&gt;。了解了一下，NextCloud 是一个拥有 &lt;strong&gt;全平台客户端&lt;/strong&gt;，支持 &lt;strong&gt;WebDAV&lt;/strong&gt;，而且 &lt;strong&gt;插件化&lt;/strong&gt;，可以 &lt;strong&gt;多用户&lt;/strong&gt; 使用的私有云存储网盘项目。不仅如此，它还支持共享、版本控制、团队协作等功能。插件化让它拥有了类似 Markdown 在线编辑，Draw-io 在线编辑，显示 RAW 文件的功能。&lt;/p&gt;
&lt;p&gt;而且，我发现它支持 Docker，这无疑简化了我们配置的步骤。&lt;/p&gt;
&lt;p&gt;那么，我们开始吧！&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://blog.aeilot.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Linux" scheme="https://blog.aeilot.top/tags/Linux/"/>
    
    <category term="Docker" scheme="https://blog.aeilot.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>sudo shutdown -r now</title>
    <link href="https://blog.aeilot.top/2020/07/22/helloworld/"/>
    <id>https://blog.aeilot.top/2020/07/22/helloworld/</id>
    <published>2020-07-22T09:45:09.000Z</published>
    <updated>2021-01-24T11:14:22.450Z</updated>
    
    <content type="html"><![CDATA[<p>你可能会惊奇地发现博客上面以前的文章全不见了。<strong>最近我对我博客进行了一次大清扫</strong>。</p><a id="more"></a><p><strong>tl;dr</strong></p><p>前几天，我突然发现自己的博客上面全是水文（以前就知道，懒得弄），心里总觉得过不去。所以，我下定决心，准备重新来过。这种感觉很好，当<code>_posts</code>目录空无一物时，我的心也释然了。</p><p>之前我所有的文章，要么是抄袭的，要么是很水的那种。<strong>在这里，我承诺，以后不再会有这种不可饶恕的情况发生了</strong>。这样做我自己心里也总是想着缺点什么。幸幸苦苦修改的自定义hexo主题（没错，我把 <a href="https://github.com/probberechts/hexo-theme-cactus">hexo-theme-cactus</a> 修改了很多，支持了 RSS，还弄了些 UI 改进，配置了 Valine.js，etc.），结果呢？上面全是水文！？这……</p><p>那么之前的文章都去哪里了呢？我并没有删除，而是把它们放置在了 <code>Draft</code> 目录下面，当然，你们看不到。<strong>手动狗头</strong></p><p>让我们重新认识对方，运行一次<code>sudo shutdown -r now</code>！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;你可能会惊奇地发现博客上面以前的文章全不见了。&lt;strong&gt;最近我对我博客进行了一次大清扫&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="杂文" scheme="https://blog.aeilot.top/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
</feed>
